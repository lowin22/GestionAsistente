@page "/mostrar-asistentes"
@using GestionAsistentes.BlazorUI.Components.Layout
@using GestionAsistentes.BlazorUI.Controlador
@using GestionAsistentes.Entidades
@layout LayoutPrincipal
@rendermode InteractiveServer

<h2 class="mb-4">Mostrar Asistentes</h2>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Opciones</th>
                    <th>Usuario</th>
                    <th>Nombre</th>
                    <th>Contraseña</th>
                    <th>Encargado</th>
                    <th>Accesos</th>
                    <th>Badge</th>
                    <th>Unidad</th>
                    <th>Horario</th>
                </tr>
            </thead>
            <tbody>
                @if (listaAsistentes == null || !listaAsistentes.Any())
                {
                    <tr>
                        <td colspan="8">No se encontraron asistentes.</td>
                    </tr>
                }
                else
                {
                    @foreach (var asistente in listaAsistentes)
                    {
                        <tr>
                            <td>
                                 
                                <button @onclick="() => EliminarAsistente(asistente.AsistenteID)">Eliminar</button>
                                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#ActualizarAsistente" @onclick="() => PrepararActualizacion(asistente.AsistenteID)">
                                    Actualizar
                                </button>
                            </td>
                            <td>@asistente.nombreUsuario</td>
                            <td>@($"{asistente.Persona?.Nombre} {asistente.Persona?.PrimerApellido} {asistente.Persona?.SegundoApellido}")</td>
                            <td>@asistente.Contrasenia</td>
                            <td>@($"{asistente.Encargado?.Persona.Nombre} {asistente.Encargado?.Persona.PrimerApellido} {asistente.Encargado?.Persona.SegundoApellido}")</td>
                            <td>@asistente.Accesos</td>                                             
                            <td>@asistente.BadgeID</td>                                                                               
                            <td>@asistente.Unidad?.Nombre</td>
                            <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#horario" @onclick="() => traerOficinas()">
                                    <span>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
                                            <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5z" />
                                            <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64l.012-.013.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5M8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3" />
                                        </svg>
                                    </span>
                                   
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="ActualizarAsistente" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ActualizarAsistente">Actualizar Asistente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="asistente" FormName="actualizarAsistenteForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="usuario" class="form-label">Usuario</label>
                        <InputText id="usuario" class="form-control" @bind-Value="asistente.nombreUsuario" />
                    </div>
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="asistente.Persona.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Primer Apellido</label>
                        <InputText id="primerApellido" class="form-control" @bind-Value="asistente.Persona.PrimerApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="segundoApellido" class="form-label">Segundo Apellido</label>
                        <InputText id="segundoApellido" class="form-control" @bind-Value="asistente.Persona.SegundoApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="contrasenia" class="form-label">Contraseña</label>
                        <InputText id="contrasenia" class="form-control" @bind-Value="asistente.Contrasenia" />
                    </div>
                    <div class="mb-3">
                        <label for="unidadID" class="form-label">Unidad</label>
                        <InputSelect id="unidadID" class="form-control" @bind-Value="asistente.UnidadID" @oninput="OnUnidadChanged">
                            @foreach (var unidad in listaUnidades)
                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="encargadoID" class="form-label">Encargado</label>
                        <InputSelect id="encargadoID" class="form-control" @bind-Value="asistente.EncargadoID" disabled="@(!listaEncargados.Any())">
                            <option value="0">-- Seleccione un encargado --</option> <!-- Opción en blanco -->
                            @foreach (var encargado in listaEncargados)
                            {
                                <option value="@encargado.EncargadoID">@($"{encargado?.Persona.Nombre} {encargado?.Persona.PrimerApellido} {encargado?.Persona.SegundoApellido}")</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="accesos" class="form-label">Accesos</label>
                        <InputTextArea id="accesos" class="form-control" @bind-Value="asistente.Accesos" />
                    </div>
                    <div class="mb-3">
                        <label for="BadgeID">Badge</label>
                        <InputSelect id="BadgeID" class="form-select" @bind-Value="asistente.BadgeID" @oninput="OnUnidadChanged">
                            <option value="">Seleccione el badge</option>
                            <option value="1">Badge 1</option>
                            <option value="2">Badge 2</option>
                            <option value="3">Badge 3</option>
                        </InputSelect>
                    </div>

                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" @onclick="GuardarActualizacionAsistente" disabled="@(!puedeGuardar())">Guardar Cambios</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="horario" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="horario">Actualizar Encargado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body row">
                <div class="col-md-6">
                    <label for="Oficina">Oficina</label>
                    <InputSelect id="OficinaID" class="form-select" @bind-Value="oficinaID" @oninput="OnEstacionChanged">
                        <option value="">Seleccione la oficina</option>
                        @foreach (var oficina in listaOficinas)
                        {
                            <option value="@oficina.OficinaID">@($"{oficina.Nombre}")</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label for="EstacionTrabajo">EstacionTrabajo</label>
                    <InputSelect id="EstacionTrabajo" class="form-select" @bind-Value="estacionTrabajoID">
                        <option value="">Seleccione la estación de trabajo</option>
                        @foreach (var estacionTrabajo in listaEstacionTrabajos)
                        {
                            <option value="@estacionTrabajo.EstacionTrabajoID">@($"{estacionTrabajo.Numero}")</option>
                        }
                    </InputSelect>
                </div>

                <div class="card-body">
                    <div class="row">
                        <div class="card mt-4 col-md-6">
                            <label for="diaSemana">Día</label>
                            <InputSelect id="diaSemana" class="form-select" @bind-Value="diaSeleccionado">
                                <option value="">Seleccione el día</option>
                                @foreach (var dia in diasDeLaSemana)
                                {
                                    <option value="@dia">@dia</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="card mt-4 col-md-6">
                            <label for="horaInicio">Hora de Inicio</label>
                            <InputSelect id="horaInicio" class="form-select" @bind-Value="horaInicioSeleccionada">
                                <option value="">Seleccione la hora de inicio</option>
                                @foreach (var hora in horasDelDia)
                                {
                                    <option value="@hora">@hora</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="card mt-4 col-md-6">
                            <label for="horaFinal">Hora de Final</label>
                            <InputSelect id="horaFinal" class="form-select" @bind-Value="horaFinalSeleccionada">
                                <option value="">Seleccione la hora de finalización</option>
                                @foreach (var hora in horasDelDia)
                                {
                                    <option value="@hora">@hora</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


                @code {

                    private AsistenteControlador asistenteControlador = new AsistenteControlador();
                    private UnidadControlador unidadControlador = new UnidadControlador();
                    private EncargadoControlador encargadoControlador = new EncargadoControlador();
                    private OficinaControlador oficinaControlador = new OficinaControlador();
                    private EstacionTrabajoControlador estacionTrabajoControlador = new EstacionTrabajoControlador();
                    private List<Asistente> listaAsistentes = new List<Asistente>();
                    private List<Unidad> listaUnidades = new List<Unidad>();
                    private List<Encargado> listaEncargados = new List<Encargado>();
                    private List<Oficina> listaOficinas = new List<Oficina>();
                    private List<EstacionTrabajo> listaEstacionTrabajos = new List<EstacionTrabajo>();
                    private int oficinaID;
                    private int estacionTrabajoID;
                    private string diaSeleccionado;
                    private string horaInicioSeleccionada;
                    private string horaFinalSeleccionada;
                    private Asistente asistente = new Asistente
        {
            Persona = new Persona(),
            Encargado = new Encargado()
            {
                Persona = new Persona()
            }
        };

                    // Lista de días de la semana
                    private List<string> diasDeLaSemana = new List<string>
                {
                "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"
                };

                    // Lista de horas (de 7 a 20)
                    private List<string> horasDelDia = Enumerable.Range(7, 14).Select(h => $"{h}:00").ToList();

                    private bool unidadCambiada = false;

                    private async Task PrepararActualizacion(int asistenteID)
                    {
                        listaUnidades = await unidadControlador.ListarUnidades();
                        asistente = listaAsistentes.Find(a => a.AsistenteID == asistenteID);
                        if (asistente.UnidadID != 0)
                        {
                            await CargarEncargados(asistente.UnidadID);
                        }
                    }

                    private async Task OnUnidadChanged(ChangeEventArgs e)
                    {
                        if (int.TryParse(e.Value.ToString(), out int unidadId))
                        {
                            asistente.UnidadID = unidadId;
                            asistente.EncargadoID = 0; // Reiniciar encargado al cambiar la unidad y agregar opción en blanco
                            unidadCambiada = true;
                            await CargarEncargados(unidadId);
                        }
                    }

                    private async Task CargarEncargados(int? unidadId)
                    {
                        if (unidadId != 0)
                        {
                            listaEncargados = await encargadoControlador.ListarEncargadosPorID(unidadId);
                        }
                        else
                        {
                            listaEncargados = new List<Encargado>();
                        }
                    }

                    private async Task EliminarAsistente(int asistenteID)
                    {
                        bool eliminado = await asistenteControlador.EliminarAsistente(asistenteID);
                        if (eliminado)
                        {
                            listaAsistentes = await asistenteControlador.ListarAsistentes();
                            StateHasChanged();
                        }
                    }

                    private async Task GuardarActualizacionAsistente()
                    {
                        // Verificación para asegurarse de que se seleccionó un encargado
                        if (asistente.EncargadoID == 0 && unidadCambiada)
                        {
                            // No se ha seleccionado un encargado
                            return;
                        }

                        bool actualizado = await asistenteControlador.ActualizarAsistente(asistente);
                        listaAsistentes = await asistenteControlador.ListarAsistentes();
                    }

                    private bool puedeGuardar()
                    {
                        // No permitir guardar si la unidad ha cambiado y no se ha seleccionado un encargado
                        return !unidadCambiada || asistente.EncargadoID != 0;
                    }

                    protected override async Task OnInitializedAsync()
                    {
                        listaAsistentes = await asistenteControlador.ListarAsistentes();
                    }

                    private async void traerOficinas()
                    {
                        listaOficinas = await oficinaControlador.ListarOficinas();
                    }

                    private async Task OnEstacionChanged(ChangeEventArgs e)
                    {
                        if (int.TryParse(e.Value.ToString(), out int oficinaid))
                        {
                            listaEstacionTrabajos = await estacionTrabajoControlador.ListarEstacionPorOficina(oficinaid);
                            StateHasChanged(); // Forzar la actualización de la UI
                        }
                    }
                }

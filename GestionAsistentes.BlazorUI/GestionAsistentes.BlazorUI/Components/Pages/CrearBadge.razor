@page "/crear-badge"
@using GestionAsistentes.BlazorUI.Controlador
@using GestionAsistentes.Entidades
@rendermode InteractiveServer
<h3>Crear Badge</h3>

<EditForm Model="badge" OnValidSubmit="RegistrarBadge" FormName="crearBadgeForm">

    <div class="mb-3">
        <label for="accesos" class="form-label">Accesos</label>
        <InputText id="accesos" class="form-control" @bind-Value="badge.Accesos" />
    </div>

    <div class="mb-3">
        <label for="horaInicio">Hora de Inicio</label>
        <InputSelect id="horaInicio" class="form-select" @bind-Value="horaInicio" @oninput="OnEstacionHorarioChanged">
            <option value="">Seleccione la hora de inicio</option>
            @foreach (var hora in horasDelDiaInicio)
            {
                <option value="@hora">@hora</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="horaFinal">Hora de Final</label>
        <InputSelect id="horaFinal" class="form-select" @bind-Value="horaFinal">
            <option value="">Seleccione la hora de finalización</option>
            @foreach (var hora in horasDelDiaFinal)
            {
                <option value="@hora">@hora</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="unidadID" class="form-label">Unidad</label>
        <InputSelect id="unidadID" class="form-control" @bind-Value="badge.UnidadID">
            @foreach (var unidad in listaUnidades)
            {
                <option value="@unidad.UnidadID">@unidad.Nombre</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="cantidadACrear" class="form-label">Cantidad a crear</label>
        <InputNumber id="cantidadACrear" class="form-control" @bind-Value="cantidadACrear" />
    </div>


    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>
@if (mensajeExito != null)
{
    <div class="alert alert-success">
        @mensajeExito
    </div>
}
@if (mensajeError != null)
{
    <div class="alert alert-danger">
        @mensajeError
    </div>
}

@code {
    BadgeControlador badgeControlador = new BadgeControlador();
    UnidadControlador unidadControlador = new UnidadControlador();
    string mensajeExito;
    string mensajeError;
    string horaInicio, horaFinal = "", horario;
    int cantidadACrear = 1;
    List<Unidad> listaUnidades = new List<Unidad>();
    protected override async Task OnInitializedAsync()
    {
        listaUnidades = await unidadControlador.ListarUnidades();
    }
    private Badge badge = new Badge()
    {
        Unidad = new Unidad(),
        Ocupado = false
    };

    // Lista de horas (de 7 a 20)
    private List<string> horasDelDiaInicio = new()
    {
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00"
    };
    private List<string> horasDelDiaFinal = new()
    {
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00"
    };


    private async Task RegistrarBadge()
    {  

        try
        {
            bool exito = false;
            badge.Horario = horaInicio + " a " + horaFinal;

            for (int i = 1; i <= cantidadACrear; i++)
            {

                exito = await badgeControlador.RegistrarBadge(badge);
            }


            if (exito)
            {
                mensajeExito = "Badge registrado con éxito.";
                mensajeError = null;

            }
            else
            {
                mensajeExito = null;
                mensajeError = "Hubo un problema al registrar el badge.";
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error: {ex.Message}";
            mensajeExito = null;
        }
        StateHasChanged();
    }

    private async Task OnEstacionHorarioChanged(ChangeEventArgs e)
    {
        var horaInicioSeleccionada = e.Value?.ToString();

        if (!string.IsNullOrEmpty(horaInicioSeleccionada))
        {
            horasDelDiaFinal = horasDelDiaInicio
                .Where(h => string.Compare(h, horaInicioSeleccionada) > 0)
                .ToList();
        }
        
    }

}
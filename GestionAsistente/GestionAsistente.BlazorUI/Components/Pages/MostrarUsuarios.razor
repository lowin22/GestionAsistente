@page "/mostrar-usuarios"
@using GestionAsistente.AccesoDatos.Modelos
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@layout LayoutPrincipal
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> RolManager

<h3 class="mb-4">Mostrar Usuarios</h3>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Opciones</th>
                    <th>Nombre Usuario</th>
                    <th>Rol</th>
                    <th>Unidad</th>
                    <th>Activo</th>
                </tr>
            </thead>
            <tbody>

                @if (listaUsuariosPaginacion != null)

                {
                    @foreach (var usuario in listaUsuariosPaginacion)
                    {
                        
                        <tr>
                            <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#EditarUsuario" @onclick="() => EditarUsuario(usuario.Id)">
                                    <!-- Icono SVG para editar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                    </svg>
                                </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => seleccionarUsuarioEliminar(usuario.Id)">
                                    <!-- Icono SVG para eliminar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                    </svg>
                                </button>
                            </td>
                            <td>@usuario.NombreUsuario</td>
                            <td>@usuario.Rol</td>
                            <td>@usuario.Unidad?.Nombre</td>
                            <td>@(usuario.Activo ? "Sí" : "No")</td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="EditarUsuario" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="EditarUsuario">Actualizar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="usuario" OnValidSubmit="ActualizarUsuario" FormName="actualizarUsuarioForm">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre Usuario</label>
                        <InputText id="nombre" class="form-control" @bind-Value="usuario.UserName" />
                    </div>

                    <div class="mb-3">
                        <label for="rolID" class="form-label">Rol</label>
                        <InputSelect id="rolID" class="form-control" @bind-Value="rolSeleccionado" @oninput="OnRolChanged">
                             <option value="">Sin rol</option>
                            @foreach (var rol in listaRolesAsignar)
                            {
                                <option value="@rol.Name">@rol.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="unidadID" class="form-label">Unidad</label>
                        <InputSelect id="unidadID" class="form-control" @bind-Value="usuario.UnidadID">
                            <option value="">Sin unidad</option>
                            @foreach (var unidad in listaUnidades)
                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label>Activo</label>
                        <InputCheckbox @bind-Value="usuario.EmailConfirmed" />
                    </div>

                    <button class="btn btn-danger" data-bs-dismiss="modal">
                        Cancelar
                    </button>
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Actualizar Usuario</button>
                
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ConfirmarEliminar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title" id="ConfirmarEliminar">¿Eliminar usuario?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fs-5">Esta acción no se puede deshacer.</p>
                <p class="text-danger">¿Estás seguro de que deseas eliminar este usuario?</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button class="btn btn-primary" data-bs-dismiss="modal">
                    Cancelar
                </button>
                <button class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => EliminarUsuario(usuarioEliminar)">

                    Confirmar
                </button>

            </div>
        </div>
    </div>
</div>
<div class="mt-3 text-center">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">
        Siguiente
    </button>
</div>

@code {

    private AuthenticationState authState;
    private ClaimsPrincipal usuarioAutenticado;
    private string nombreUsuarioAutenticado;
    private ApplicationUser usuarioIdentity;

    private UsuarioControlador usuarioControlador = new UsuarioControlador();
    private UnidadControlador unidadControlador = new UnidadControlador();
    private RolControlador rolControlador = new RolControlador();
    private string defaultRole = "Usuario";
    private string adminRol = "Administrador";
    List<Unidad> listaUnidades = new List<Unidad>();

    private List<UserView> listaUsuarios = new List<UserView>();

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;
    private List<UserView> listaUsuariosPaginacion = new List<UserView>();

    private HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    private HistorialAcciones historialAcciones = new HistorialAcciones
    {
    };

    private ApplicationUser usuarioEliminar = new ApplicationUser
    {


    };

    private string rolSeleccionado = "0";

    private List<IdentityRole> listaRolesAsignar = new List<IdentityRole>();

    private ApplicationUser usuario = new ApplicationUser
    {

    };

    private ApplicationUser actualizarUsuario = new ApplicationUser
    {

    };

    async Task EditarUsuario(string userId)
    {

        actualizarUsuario = await UserManager.FindByIdAsync(userId);

        //asignar propiedades al usuario
        usuario.UserName = actualizarUsuario.UserName;
        usuario.UnidadID = actualizarUsuario.UnidadID;
        usuario.EmailConfirmed = actualizarUsuario.EmailConfirmed;

        var roles = await UserManager.GetRolesAsync(actualizarUsuario);

        rolSeleccionado = roles.FirstOrDefault();

        //si el rolName es admin se debe de quitar las unidades
        if(rolSeleccionado == adminRol)
        {
            listaUnidades.Clear();
        }
        //si es usuario regular se aplica todas las unidades del usuario
        else if(rolSeleccionado != adminRol && usuarioIdentity.UnidadID != null)
        {
            listaUnidades = await unidadControlador.ListarUnidades();
            //poner la lista unidades que le corresponde al usuario
            listaUnidades = listaUnidades.Where(u => u.UnidadID == actualizarUsuario.UnidadID).ToList();
        }
        //rol de admin usuario seleccionado y usuario autenticado admin
        else if (rolSeleccionado != adminRol && usuarioIdentity.UnidadID == null)
        {
            listaUnidades = await unidadControlador.ListarUnidades();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        usuarioAutenticado = authState.User;

        // Comprobar si el usuario está autenticado y asignar valores
        if (usuarioAutenticado.Identity?.IsAuthenticated ?? false)
        {
            nombreUsuarioAutenticado = usuarioAutenticado.Identity.Name;

            // Obtener el usuario desde el UserManager
            usuarioIdentity = await UserManager.FindByNameAsync(nombreUsuarioAutenticado);

            // Asignar el nombre de usuario al historial de acciones
            historialAcciones.NombrePersona = nombreUsuarioAutenticado;
        }

        //Cargar toda lista de roles para admin
        listaRolesAsignar = await RolManager.Roles.ToListAsync();

        //roles para usuario regular no contiene administrador
        if(usuarioIdentity.UnidadID != null)
        {
            listaRolesAsignar.RemoveAll(r => r.Name == "Administrador");
        }

        //Cargar lista de usuarios
        await CargarListaUsuario();

        await CargarPagina();

        //await CargarUsuariosPaginados();

    }

    // private async Task RegistrarUsuario()
    // {

    //     await usuarioControlador.RegistrarUsuario(crearUsuario);

    //     listaUsuarios = await usuarioControlador.ListarUsuarios();

    //     crearUsuario = new Usuario

    //         {

    //             Persona = new Persona()

    //         };

    //     StateHasChanged();

    // }

    private async Task seleccionarUsuarioEliminar(string userId)
    {

        usuarioEliminar = await UserManager.FindByIdAsync(userId);

    }

    async Task EliminarUsuario(ApplicationUser usuarioEliminar)
    {
        var result = await UserManager.DeleteAsync(usuarioEliminar);

        if (result.Succeeded)
        {
            Console.WriteLine("Usuario eliminado.");

            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = "Eliminar usuario: " + usuarioEliminar.UserName;
            historialAcciones.Fecha = DateTime.Now;

            //eliminar de listaUsuarios segun el id que viene del usuarioEliminar
            listaUsuarios.RemoveAll(u => u.Id == usuarioEliminar.Id);
            await CargarPagina();

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);
        }
        else
        {
            Console.WriteLine("No se logro eliminar el usuario.");
        }

        StateHasChanged();
    }

    private async Task ActualizarUsuario()
    {
        //Crear Lista de roles del usuario
        //Obtener roles actuales
        var rolesUsuario = await UserManager.GetRolesAsync(actualizarUsuario);
        var rolAsignado = rolesUsuario.FirstOrDefault();

        //colocar antes que se actualicen las propiedades del usuario
        historialAcciones.Accion = "Actualizar usuario: " + actualizarUsuario.UserName +
    " a " + usuario.UserName;

        //actualizar las propiedades asignadas en el formulario
        actualizarUsuario.UserName = usuario.UserName;
        actualizarUsuario.UnidadID = usuario.UnidadID;
        actualizarUsuario.EmailConfirmed = usuario.EmailConfirmed;

        await UserManager.UpdateSecurityStampAsync(actualizarUsuario);
        var result = await UserManager.UpdateAsync(actualizarUsuario);

        if (result.Succeeded)
        {
            Console.WriteLine("Se actualizo correctamente usuario");

            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);


            // //si rol no esta vacio y ademas habia un rol asignado
            if (!string.IsNullOrEmpty(rolSeleccionado))
            {
                //remover el anterior rol que se le habia asignado
                if (!string.IsNullOrEmpty(rolAsignado))
                {
                    await UserManager.RemoveFromRoleAsync(actualizarUsuario, rolAsignado);
                }
                //Agregar nuevo rol
                result = await UserManager.AddToRoleAsync(actualizarUsuario, rolSeleccionado);
            }

            //si se quiere eliminar el rol, entonces debe tener un rol seleccionado y luego un rolAsignado en la BD
            if(string.IsNullOrEmpty(rolSeleccionado) && !string.IsNullOrEmpty(rolAsignado))
            {
                await UserManager.RemoveFromRoleAsync(actualizarUsuario, rolAsignado);
            }

        }
        else
        {
            Console.WriteLine("Fallo del usuarios");
        }

        await CargarListaUsuario();

        await CargarPagina();

        StateHasChanged();

    }

    private async Task OnRolChanged(ChangeEventArgs e)
    {
        //e.value viene el string del rol
        if (e.Value.ToString() == adminRol)
        {
            actualizarUsuario.UnidadID = null;
            usuario.UnidadID = null;
            //se limpia la unidad
            listaUnidades.Clear();
        }
        //se selecciona un usuario que no tiene
        else if(actualizarUsuario.UnidadID == null && usuarioIdentity.UnidadID == null)
        {
            listaUnidades = await unidadControlador.ListarUnidades();
        }
        else if(actualizarUsuario.UnidadID == null && usuarioIdentity.UnidadID != null){
                listaUnidades = await unidadControlador.ListarUnidades();
                //poner la lista unidades que le corresponde al usuario
                listaUnidades = listaUnidades.Where(u => u.UnidadID == actualizarUsuario.UnidadID).ToList();
        }
        //sino entonces si tiene unidad asignada
        // else
        // {
        //     listaUnidades = await unidadControlador.ListarUnidades();
        //     //poner la lista unidades que le corresponde al usuario
        //     listaUnidades = listaUnidades.Where(u => u.UnidadID == actualizarUsuario.UnidadID).ToList();
        // }
    }

    private async Task CargarPagina()
    {
        List<UserView> allUsuarios = listaUsuarios;
        totalItems = allUsuarios.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        listaUsuariosPaginacion = allUsuarios
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CargarUsuariosPaginados()
    {
        totalItems = await usuarioControlador.ContarUsuarios();
        totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

        currentPage = Math.Max(currentPage, 1);

        int skip = (currentPage - 1) * pageSize;
        var usuariosPaginados = await usuarioControlador.ObtenerUsuariosPaginados(skip, pageSize);

        listaUsuariosPaginacion = usuariosPaginados.Select(u => new UserView
            {
                Id = u.UsuarioID.ToString(),
                NombreUsuario = u.Persona?.Nombre,  // Maneja posibles nulos
                UnidadID = u.UnidadID,
                Unidad = u.Unidad != null ? new UnidadEF { UnidadID = u.Unidad.UnidadID, Nombre = u.Unidad.Nombre } : null,
                Rol = u.Rol != null ? u.Rol.Nombre : "Sin Rol",  
                Activo = true  
            }).ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }

    private async Task CargarListaUsuario()
    {
        listaUsuarios.Clear();
        //Inicio Listar usuarios que no sean administradores
        var listaTodosUsuarios = await UserManager.Users
        .Include(u => u.Unidad)
        .ToListAsync();

        var listaFiltrada= new List<ApplicationUser>();

        //si es usuario regular se filtran los administradores
        if (usuarioIdentity.UnidadID != null)
        {
            foreach (var user in listaTodosUsuarios)
            {
                var roles = await UserManager.GetRolesAsync(user);
                if (!roles.Contains("Administrador"))
                {
                    listaFiltrada.Add(user);
                }
            }

            //Mostrar solo los usuario de esa unidad
            listaTodosUsuarios = listaFiltrada.Where(u => u.UnidadID == usuarioIdentity.UnidadID).ToList();
        }
        
        //si es usuario admin no se filtra, se obtienen todos los usuarios

        //FIN Listar usuarios que no sean administradores
        
        foreach (var usuario in listaTodosUsuarios)
        {
            var roles = await UserManager.GetRolesAsync(usuario);
            var cadenaRoles = string.Join(", ", roles);

            //Agregar los nuevos usuarios a la lista userView para cuando se dibujen en pantalla
            listaUsuarios.Add(new UserView
            {
                Id = usuario.Id,
                NombreUsuario = usuario.UserName,
                UnidadID = usuario.UnidadID,
                Unidad = usuario.Unidad,
                Rol = cadenaRoles,
                Activo = usuario.EmailConfirmed
            });

        }
    } 

    @* Creacion unica y exclusivamente para mostrar en pantalla
    Y por la forma en que maneja identity los roles por tablas separadas
    Crear esta clase privada facilita manejar los campos en una sola clase *@
    private class UserView
    {
        public string Id { get; set; }
        public string NombreUsuario { get; set; }
        public int? UnidadID { get; set; }
        public UnidadEF Unidad { get; set; }
        public string Rol { get; set; }
        public bool Activo { get; set; }
    }
}


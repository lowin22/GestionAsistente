@page "/crear-asistente"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@layout LayoutPrincipal
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Usuario, Administrador")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<div class="container mt-3">
    <div class="card p-3 mx-auto">
        <h2 class="text-center mb-4">Registro de Asistente</h2>
        <hr style="margin-top:-0.5em;"/>
        <EditForm Model="asistente" OnValidSubmit="RegistrarAsistente" FormName="crearAsistenteForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row g-2">
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="usuario" class="form-control form-control-sm" @bind-Value="asistente.nombreUsuario" placeholder="Usuario" />
                        <label for="usuario">Usuario</label>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="nombre" class="form-control form-control-sm" @bind-Value="asistente.Persona.Nombre" placeholder="Nombre" />
                        <label for="nombre">Nombre</label>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="primer-apellido" class="form-control form-control-sm" @bind-Value="asistente.Persona.PrimerApellido" placeholder="Primer Apellido" />
                        <label for="primer-apellido">Primer Apellido</label>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="segundo-apellido" class="form-control form-control-sm" @bind-Value="asistente.Persona.SegundoApellido" placeholder="Segundo Apellido" />
                        <label for="segundo-apellido">Segundo Apellido</label>
                    </div>
                </div>
                <div class="col-12 col-md-6" >
                        <InputSelect class="form-select form-select-sm" id="unidad" @bind-Value="asistente.UnidadID" @oninput="OnUnidadChanged">
                            <option value="0">Seleccione una unidad</option>
                            @foreach (var unidad in listaUnidades)
                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                </div>
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputTextArea id="accesos" class="form-control form-control-sm" @bind-Value="asistente.Accesos" placeholder="Accesos" style="height: 80px" />
                        <label for="accesos">Accesos</label>
                    </div>
                </div>
                <div class="col-12 col-md-6" style="margin-top: -2em">
                        <InputSelect class="form-select form-select-sm" id="encargado" @bind-Value="asistente.EncargadoID">
                            <option value="">Seleccione un encargado</option>
                            @foreach (var encargado in listaEncargados)
                            {
                                <option value="@encargado.EncargadoID">
                                    @($"{encargado.Persona.Nombre} {encargado.Persona.PrimerApellido} {encargado.Persona.SegundoApellido}")
                                </option>
                            }
                        </InputSelect>
                </div>
                <div class="col-12 col-md-6">
                    <div class="form-floating mb-2">
                        <InputText id="contrasenia" class="form-control form-control-sm" style="height: 80%;" @bind-Value="asistente.Contrasenia" placeholder="Contraseña" />
                        <label for="contrasenia">Contraseña</label>
                    </div>
                </div>
                <div class="col-12 col-md-6" style="margin-top: -2.5em">
                        <InputSelect id="BadgeID" class="form-select form-select-sm" @bind-Value="asistente.BadgeID">
                            <option value="">Seleccione el badge</option>
                            @foreach (var badge in listaBadge)
                            {
                                <option value="@badge.BadgeID">@badge.BadgeID</option>
                            }
                        </InputSelect>
                </div>
            </div>
            <div style="text-align:center; margin: 0.7em;">
                <button type="submit" class="btn btn-primary btn-sm">Registrar Asistente</button>
            </div>
        </EditForm>
    </div>



 
    @if (notificarUsuario != null)
    {
        <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content custom-modal">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmación</h5>
                        <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                            <p>@notificarUsuario</p>                      
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private string? userName;
    private int? unidadUsuario;
    private string notificarUsuario;
    private bool registrado;
    private ApplicationUser usuarioIdentity = new ApplicationUser { };
    private AsistenteControlador asistenteControlador = new AsistenteControlador();
    private PersonaControlador personaControlador = new PersonaControlador();
    private UnidadControlador unidadControlador = new UnidadControlador();
    private EncargadoControlador encargadoControlador = new EncargadoControlador();
    private List<Unidad> listaUnidades = new List<Unidad>();
    private BadgeControlador badgeControlador = new BadgeControlador();
    private List<Encargado> listaEncargados = new List<Encargado>();
    private List<Badge> listaBadge = new List<Badge>();
    private Asistente asistente = new Asistente
        {
            Persona = new Persona()
        };

    public HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    public HistorialAcciones historialAcciones = new HistorialAcciones();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;
            usuarioIdentity = await UserManager.FindByNameAsync(userName);
            unidadUsuario = usuarioIdentity.UnidadID;
        }
        listaUnidades = await unidadControlador.ListarUnidades();
        if (unidadUsuario != null)
        
        {
            listaUnidades = listaUnidades.Where(x => x.UnidadID == unidadUsuario).ToList();
        }
       
        if (asistente.UnidadID != 0)
        {
            await CargarEncargados(asistente.UnidadID);
        }
    }

    private async Task OnUnidadChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int unidadId))
        {
            asistente.UnidadID = unidadId;
            await CargarEncargados(unidadId);
            listaBadge = await badgeControlador.ListarBadgePorUnidad(unidadId);
        }
    }

    private async Task CargarEncargados(int? unidadId)
    {
        if (unidadId != 0)
        {
            listaEncargados = await encargadoControlador.ListarEncargadosPorID(unidadId);
        }
        else
        {
            listaEncargados = new List<Encargado>();
        }

        StateHasChanged();
    }

    private async Task RegistrarAsistente()
    {

        (registrado, string mensaje) = await asistenteControlador.RegistrarAsistente(asistente);

        if (registrado)
        {
            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = "Registrar asistente: " + asistente.Persona.Nombre + " " +
            asistente.Persona.PrimerApellido + " " + asistente.Persona.SegundoApellido;
            historialAcciones.Fecha = DateTime.Now;
            historialAcciones.NombrePersona = userName;
            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            notificarUsuario= mensaje;
            registrado = true;
            LimpiarFormulario();
            StateHasChanged();
        }
        else
        {
            registrado = false;
            notificarUsuario=mensaje;

        }
        // Aquí puedes agregar lógica adicional, como mostrar un mensaje de éxito o error
    }

    private void LimpiarFormulario()
    {
        asistente = new Asistente
            {
                Persona = new Persona()
            };
        listaEncargados.Clear();
    }

    private void CerrarModal()
    {
        notificarUsuario = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

    private void CerrarModalError()
    {
        notificarUsuario = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

}
@page "/mostrar-reportes"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@layout LayoutPrincipal
@rendermode InteractiveServer

<h3>Reportes</h3>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered">
            <thead style="text-align: center;">
                <tr style="text-align: center">
                    <th>Acción</th>
                    <th>Usuario</th>
                    <th>Numero de Badge</th>
                    <th>Asistente</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                    @* @for (int i = 0; i < listaReportes.Count; i++)
                    {
                        var index = i; // Capturar el valor de 'i' en una variable local
                        <tr>
                            <td>@listaReportes[index].Accion</td>
                            <td>@listaReportes[index].NombreUsuario</td>
                            <td>@listaReportes[index].NumeroBadge</td>
                            <td>@listaReportes[index].NombreAsistente</td>
                            <td>@listaReportes[index].Fecha</td>
                        </tr>
                    } *@
                @foreach (var reporte in paginaReportes)
                {
                    <tr>
                        <td>@reporte.Accion</td>
                        <td>@reporte.NombreUsuario</td>
                        <td>@reporte.NumeroBadge</td>
                        <td>@reporte.NombreAsistente</td>
                        <td>@reporte.Fecha</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div style="text-align: center; margin-top: 1rem;">
    <button @onclick="PaginaAnterior" class="btn btn-secondary" disabled="@(!TienePaginaAnterior)">Anterior</button>
    <span>Página @paginaActual de @paginasTotales</span>
    <button @onclick="PaginaSiguiente" class="btn btn-secondary" disabled="@(!TienePaginaSiguiente)">Siguiente</button>
</div>


@code {
    ReporteControlador reporteControlador = new ReporteControlador();
    List<ReporteBadge> listaReportes = new List<ReporteBadge>();
    private List<ReporteBadge> paginaReportes = new List<ReporteBadge>();

    private int paginaActual = 1;
    private int tamanioPagina = 10;
    private int paginasTotales => (int)Math.Ceiling((double)listaReportes.Count / tamanioPagina);

    ReporteBadge reporte = new ReporteBadge
    {    
    };

    protected override async Task OnInitializedAsync()
    {
        listaReportes = await reporteControlador.ListarReporte();

        ActualizarListaPaginada();
        StateHasChanged();
    }

    private void ActualizarListaPaginada()
    {
        paginaReportes = listaReportes
            .Skip((paginaActual - 1) * tamanioPagina)
            .Take(tamanioPagina)
            .ToList();
    }

    private void PaginaSiguiente()
    {
        if (TienePaginaSiguiente)
        {
            paginaActual++;
            ActualizarListaPaginada();
        }
    }

    private void PaginaAnterior()
    {
        if (TienePaginaAnterior)
        {
            paginaActual--;
            ActualizarListaPaginada();
        }
    }

    private bool TienePaginaAnterior => paginaActual > 1;
    private bool TienePaginaSiguiente => paginaActual < paginasTotales;
}


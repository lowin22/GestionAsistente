@page "/mostrar-reportes"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@layout LayoutPrincipal
@rendermode InteractiveServer

<h3>Reportes</h3>
<hr />
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered">
            <thead style="text-align: center;">
                <tr style="text-align: center">
                    <th>Acción</th>
                    <th>Usuario</th>
                    <th>Numero de Badge</th>
                    <th>Asistente</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                    @for (int i = 0; i < listaReportes.Count; i++)
                    {
                        var index = i; // Capturar el valor de 'i' en una variable local
                        <tr>
                            <td>@listaReportes[index].Accion</td>
                            <td>@listaReportes[index].NombreUsuario</td>
                            <td>@listaReportes[index].NumeroBadge</td>
                            <td>@listaReportes[index].NombreAsistente</td>
                            <td>@listaReportes[index].Fecha</td>
                        </tr>
                    }
            </tbody>
        </table>
    </div>
</div>
<div class="mt-3 text-center" style="padding-bottom: 5em;">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages && totalPages == 1 && totalPages == 0)">
        Siguiente
    </button>
</div>

@code {
    ReporteControlador reporteControlador = new ReporteControlador();
    List<ReporteBadge> listaReportes = new List<ReporteBadge>();

    ReporteBadge reporte = new ReporteBadge
    {    
    };

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        listaReportes = await reporteControlador.ListarReporte();
        StateHasChanged();

        await CargarPagina();
    }

    private async Task CargarPagina()
    {
        var allReportes = await reporteControlador.ListarReporte();
        totalItems = allReportes.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        listaReportes = allReportes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }
}


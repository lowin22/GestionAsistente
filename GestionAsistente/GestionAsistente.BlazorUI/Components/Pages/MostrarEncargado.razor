@page "/mostrar-encargado"
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@attribute [Authorize(Roles = "Usuario, Administrador")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<h3>Mostrar Encargado</h3>
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#CrearEncargado">
    Crear Encargado
</button>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered">
            <thead style="text-align: center;">
                <tr style="text-align: center">
                    <th>Acciones</th>
                    <th>Nombre Completo</th>
                    <th>Unidad</th>

                </tr>
            </thead>
            <tbody>
                @if (encargadoControlador.listaEncargados != null)

                {
                    @foreach (var encargado in encargadoControlador.listaEncargados)
                    {
                        <tr>
                            <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @onclick="() => encargadoControlador.EditarEncargado(encargado.EncargadoID)">
                                    <!-- Icono SVG para editar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                    </svg>
                                </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar">
                                    <!-- Icono SVG para eliminar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16" @onclick="() => encargadoControlador.seleccionarEncargadoEliminar(encargado.EncargadoID)">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                    </svg>
                                </button>
                            </td>
                            <td>@encargado.Persona.Nombre @encargado.Persona.PrimerApellido @encargado.Persona.SegundoApellido</td>

                            <td>@encargado.Unidad?.Nombre</td>
                        </tr>
                    }
                }else {
                    <tr>
                        <td colspan="3">No hay encargados registrados</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Actualizar Encargado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model=" encargadoControlador.encargado" OnValidSubmit="ActualizarEncargado" FormName="actualizarEncargadoForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="encargadoControlador.encargado.Persona.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Primer Apellido</label>
                        <InputText id="primerApellido" class="form-control" @bind-Value="encargadoControlador.encargado.Persona.PrimerApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Primer Apellido</label>
                        <InputText id="primerApellido" class="form-control" @bind-Value="encargadoControlador.encargado.Persona.SegundoApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="unidadID" class="form-label">Unidad</label>
                        <InputSelect id="unidadID" class="form-control" @bind-Value="encargadoControlador.encargado.Unidad.UnidadID">
                          
                            @foreach (var unidad in encargadoControlador.listaUnidades)

                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Actualizar Encargado</button>
                        <button class="btn btn-danger" data-bs-dismiss="modal">
                            Cancelar
                        </button>
                    </div>
                  
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="CrearEncargado" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="CrearEncargado">Actualizar Encargado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model=" encargadoControlador.crearEncargado" OnValidSubmit="RegistrarEncargado" FormName="crearEncargadoForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="encargadoControlador.crearEncargado.Persona.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Primer Apellido</label>
                        <InputText id="primerApellido" class="form-control" @bind-Value="encargadoControlador.crearEncargado.Persona.PrimerApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Primer Apellido</label>
                        <InputText id="primerApellido" class="form-control" @bind-Value="encargadoControlador.crearEncargado.Persona.SegundoApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="unidadID" class="form-label">Unidad</label>
                        <InputSelect id="unidadID" class="form-control" @bind-Value="encargadoControlador.crearEncargado.Unidad.UnidadID">
                            @foreach (var unidad in encargadoControlador.listaUnidades)

                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button type="submit" class="btn btn-primary " data-bs-dismiss="modal">Registrar Encargado</button>
                        <button class="btn btn-danger" data-bs-dismiss="modal">
                            Cancelar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ConfirmarEliminar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title" id="ConfirmarEliminar">¿Eliminar Encargado?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fs-5">Esta acción no se puede deshacer.</p>
                <p class="text-danger">¿Estás seguro de que deseas eliminar este encargado?</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button class="btn btn-primary" data-bs-dismiss="modal">
                    Cancelar
                </button>
                <button class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => EliminarEncargado(encargadoControlador.eliminarEncargado.EncargadoID)">

                    Confirmar
                </button>

            </div>
        </div>
    </div>
</div>
<div class="mt-3 text-center">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">
        Siguiente
    </button>
</div>
@code {
    EncargadoControlador encargadoControlador = new EncargadoControlador();
    private string? userName;
    private int? unidad;
    private ApplicationUser usuarioIdentity = new ApplicationUser { };
    HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    HistorialAcciones historialAcciones = new HistorialAcciones
    {
        NombrePersona = "UsuarioSesion"
    };

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;

            usuarioIdentity = await UserManager.FindByNameAsync(userName);

            unidad = usuarioIdentity.UnidadID;

            // unidad = user.Identity.
        }
        encargadoControlador.unidad = unidad;
        await encargadoControlador.listarEncargados();
        await encargadoControlador.listarUnidades();
    }
    async Task EliminarEncargado(int encargadoID)
    {
        await encargadoControlador.EliminarEncargado(encargadoID);
        await encargadoControlador.listarEncargados();

        //Establecer propiedades para historialAcciones de registrar
        historialAcciones.Accion = "Eliminar encargado: " + encargadoControlador.eliminarEncargado.Persona.Nombre +
        encargadoControlador.eliminarEncargado.Persona.Nombre + " " +
        encargadoControlador.eliminarEncargado.Persona.PrimerApellido + " " +
        encargadoControlador.eliminarEncargado.Persona.SegundoApellido;
        historialAcciones.Fecha = DateTime.Now;

        await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

        StateHasChanged();
    }
    private async Task ActualizarEncargado()
    {
        await encargadoControlador.ActualizarEncargado(encargadoControlador.encargado);
        await encargadoControlador.listarEncargados();

        //Establecer propiedades para historialAcciones de registrar
        historialAcciones.Accion = "Actualizar encargado: " + encargadoControlador.actaulizarEncargado.Persona.Nombre + " " +
        encargadoControlador.actaulizarEncargado.Persona.PrimerApellido + " " +
        encargadoControlador.actaulizarEncargado.Persona.SegundoApellido +
        " a " + encargadoControlador.encargado.Persona.Nombre + " " +
        encargadoControlador.encargado.Persona.PrimerApellido + " " +
        encargadoControlador.encargado.Persona.SegundoApellido;
        historialAcciones.Fecha = DateTime.Now;
        await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

        StateHasChanged();
    }
    private async Task RegistrarEncargado()
    {
        await encargadoControlador.registrarEncargado(encargadoControlador.crearEncargado);
        encargadoControlador.crearEncargado = new Encargado
        {
            Persona = new Persona(),
                Unidad = new Unidad()
        };

        //Establecer propiedades para historialAcciones de registrar
        historialAcciones.Accion = "Registrar encargado: " + encargadoControlador.encargado.Persona.Nombre + " " +
        encargadoControlador.encargado.Persona.PrimerApellido + " " + encargadoControlador.encargado.Persona.SegundoApellido;
        historialAcciones.Fecha = DateTime.Now;

        await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

        await encargadoControlador.listarEncargados();
        StateHasChanged();
    }

    private async Task CargarPagina()
    {
        var allEncargados = await encargadoControlador.ListarEncargados();
        totalItems = allEncargados.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        encargadoControlador.listaEncargados = allEncargados
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }
}
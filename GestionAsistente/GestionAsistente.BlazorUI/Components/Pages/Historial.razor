@page "/historial"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@layout LayoutPrincipal
@rendermode InteractiveServer

<h3 class="mb-4">Historial</h3>
<div style="display: flex; gap: 1rem; align-items: center; margin-bottom: 1rem;">
    <div>
        <label>Filtrar por Persona:</label>
        <select @bind="filtroPersona" style="width: 150px;" class="form-select">
            <option value="">Todos</option>
            @foreach (var persona in listaPersonas)
            {
                <option value="@persona">@persona</option>
            }
        </select>
    </div>

    <div>
        <label>Filtrar por Acción:</label>
        <select @bind="filtroAccion" style="width: 150px;" class="form-select">
            <option value="">Todas</option>
            <option value="registrar">Registrar</option>
            <option value="actualizar">Actualizar</option>
            <option value="eliminar">Eliminar</option>
            @foreach (var accion in listaAcciones)
            {
                <option value="@accion">@accion</option>
            }
        </select>
    </div>

    <div>
        <label>Filtrar por Fecha:</label>
        <input type="date" @bind="filtroFecha" style="width: 150px;" class="form-control" />
    </div>
    <button class="btn btn-primary" @onclick="BuscarHistorial">Buscar</button>
    <!-- Botón para limpiar el historial -->
    <button class="btn btn-danger" @onclick="LimpiarHistorial">Limpiar Historial</button>
</div>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    @* <th>HistorialAccionId</th> *@
                    <th>Nombre usuario</th>
                    <th>Acción realizada</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                @if (paginaActualHistorial != null && paginaActualHistorial.Any())
                {
                    @foreach (var historialAcciones in paginaActualHistorial)
                    {
                        <tr>
                            <td>@historialAcciones.NombrePersona</td>
                            <td>@historialAcciones.Accion</td>
                            <td>@historialAcciones.Fecha</td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="3">No hay registros disponibles</td></tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="mt-3 text-center">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">
        Siguiente
    </button>
</div>
@code {
    private HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    private List<HistorialAcciones> listaHistorialAcciones = new List<HistorialAcciones>();
    private List<HistorialAcciones> listaHistorialAccionesFiltradas = new List<HistorialAcciones>();
    private List<HistorialAcciones> paginaActualHistorial = new List<HistorialAcciones>();

    private List<string> listaPersonas = new List<string>();
    private List<string> listaAcciones = new List<string>();

    private string filtroPersona = "";
    private string filtroAccion = "";
    private DateTime? filtroFecha = null;

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        listaHistorialAcciones = await historialAccionesControlador.ListarHistorial();
        listaHistorialAccionesFiltradas = listaHistorialAcciones
            .OrderByDescending(h => h.Fecha)
            .ToList();

        totalItems = listaHistorialAcciones.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        await CargarPagina();

    }

    private async Task BuscarHistorial()
    {
        listaHistorialAccionesFiltradas = historialAccionesControlador.BuscarHistorial(filtroPersona, filtroAccion, filtroFecha);

        totalItems = listaHistorialAccionesFiltradas.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
        currentPage = 1; // Reiniciar a la primera página

        await CargarPagina();
    }

    private async Task CargarPagina()
    {
        // Extraer solo los registros para la página actual
        paginaActualHistorial = listaHistorialAccionesFiltradas
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }

    private void filtroPersonaChanged(ChangeEventArgs e)
    {
        filtroPersona = e.Value.ToString();
        FiltrarHistorial();
    }

    private void filtroAccionChanged(ChangeEventArgs e)
    {
        filtroAccion = e.Value.ToString();
        FiltrarHistorial();
    }

    private void filtroFechaChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out var fecha))
        {
            filtroFecha = fecha;
        }
        else
        {
            filtroFecha = null;
        }
        FiltrarHistorial();
    }

    private void FiltrarHistorial()
    {
        listaHistorialAccionesFiltradas = listaHistorialAcciones
            .Where(h => (string.IsNullOrEmpty(filtroPersona) || h.NombrePersona == filtroPersona) &&
                        (string.IsNullOrEmpty(filtroAccion) || h.Accion == filtroAccion) &&
                        (!filtroFecha.HasValue || h.Fecha.Date == filtroFecha.Value.Date))
            .ToList();
    }

    private async Task LimpiarHistorial()
    {
        await historialAccionesControlador.LimpiarHistorialCompleto();

        listaHistorialAcciones = new List<HistorialAcciones>();
        listaHistorialAccionesFiltradas = listaHistorialAcciones;
        await CargarPagina();
    }
}
@page "/mostrar-oficinas"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@layout LayoutPrincipal
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Usuario, Administrador")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<h3>Mostrar Oficinas</h3>
@* <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#CrearEncargado">
    Crear Oficina
</button> *@
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered">
            <thead style="text-align: center;">
                <tr style="text-align: center">
                    <th>Acciones</th>
                    <th>Nombre</th>
                    <th>Cantidad de Estaciones de Trabajo</th>
                    <th>Horarios</th>
                </tr>
            </thead>
            <tbody>
                @if (listaOficinas != null && cantidadEstaciones != null && listaOficinas.Count == cantidadEstaciones.Count)
                {
                   @for (int i = 0; i < listaOficinas.Count; i++)
                    {
                        var index = i; // Capturar el valor de 'i' en una variable local
                        <tr>
                            <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @onclick="() => seleccionarOficinaActualizar(listaOficinas[index].OficinaID)">
                                    <!-- Icono SVG para editar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                    </svg>
                                </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => seleccionarOficinaEliminar(listaOficinas[index].OficinaID)">
                                    <!-- Icono SVG para eliminar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                    </svg>
                                </button>

                            </td>
                            <td>@listaOficinas[index].Nombre</td>

                            <td>
                                <span>@cantidadEstaciones[index]</span>
                            </td>
                            <td>
                                <NavLink href="@($"/mostrar-horario/{listaOficinas[index].OficinaID}")">
                                    <span>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
                                            <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5z" />
                                            <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64l.012-.013.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5M8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3" />
                                        </svg>
                                    </span>
                                </NavLink>
   
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


<!-- Modales -->
<div class="modal fade" id="ConfirmarEliminar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title" id="ConfirmarEliminar">¿Eliminar Oficina?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fs-5">Esta acción no se puede deshacer.</p>
                <p class="text-danger">¿Seguro de que desea eliminar esta Oficina y sus Estaciones de trabajo?</p>
                <p class="text-danger">Oficina a eliminar: @oficinaEliminar.Nombre</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => EliminarOficina(oficinaEliminar.OficinaID)">
                    Confirmar
                </button>
                <button class="btn btn-danger" data-bs-dismiss="modal">
                    Cancelar
                </button>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Actualizar Oficina</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="oficinaActualizar.Nombre" />
                    </div>

                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Estaciones de trabajo</label>
                        <InputNumber id="primerApellido" class="form-control" @bind-Value="cantidadEstacionesActualizar" />
                    </div>
                    <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="ActualizarOficina">
                        Confirmar
                    </button>
                    <button class="btn btn-danger" data-bs-dismiss="modal">
                        Cancelar
                    </button>
            </div>
        </div>
    </div>
</div>
<div class="mt-3 text-center btn-paginacion">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">
        Siguiente
    </button>
</div>

@code {
    EstacionTrabajoControlador estacionTrabajoControlador = new EstacionTrabajoControlador();
    OficinaControlador oficinaControlador = new OficinaControlador();
    List<Oficina> listaOficinas = new List<Oficina>();
    List<int> cantidadEstaciones = new List<int>();
    int cantidadEstacionesActualizar;
    // int cantidadEstaciones;

    //sesion
    private ApplicationUser usuarioIdentity = new ApplicationUser { };
    private string? userName;
    private int? unidad;

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;

    HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    HistorialAcciones historialAcciones = new HistorialAcciones
    {
        NombrePersona = "NombreUsuario"
    };

    Oficina oficina = new Oficina
    {    // Oficina = new Oficina()
    };

    Oficina oficinaEliminar = new Oficina
    {    // Oficina = new Oficina()
    };

    Oficina oficinaActualizar = new Oficina
    {    // Oficina = new Oficina()
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;

            usuarioIdentity = await UserManager.FindByNameAsync(userName);

            unidad = usuarioIdentity.UnidadID;
        }

        listaOficinas = await oficinaControlador.ListarOficinas();
       // await CargarCantidadEstaciones();

        // totalItems = listaOficinas.Count;
        // totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
        await CargarPagina();
    }

    private async Task EliminarOficina(int oficinaID)
    {
        await oficinaControlador.EliminarOficinas(oficinaID);

        // Establecer propiedades para historialAcciones de registrar
        historialAcciones.Accion = "Eliminar oficina: " + oficinaEliminar.Nombre;
        historialAcciones.Fecha = DateTime.Now;

        await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

        // Recargar la lista de oficinas y la cantidad de estaciones
        await CargarPagina();
        //await CargarCantidadEstaciones();

        // Refresca la UI después de la eliminación
        StateHasChanged();
    }

    private async Task ActualizarOficina()
    {
        await oficinaControlador.ActualizarOficina(oficinaActualizar, cantidadEstacionesActualizar);

        // Establecer propiedades para historialAcciones de registrar
        historialAcciones.Accion = "Actualizar oficina: " + oficina.Nombre + " a " + oficinaActualizar.Nombre;
        historialAcciones.Fecha = DateTime.Now;

        await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

        // Recargar la lista de oficinas y la cantidad de estaciones
        await CargarPagina();
        //await CargarCantidadEstaciones();

        // Refresca la UI después de la actualización
        StateHasChanged();
    }

    // private async Task CargarCantidadEstaciones()
    // {
    //     var allOficinas = await oficinaControlador.ListarOficinas();
    //     totalItems = allOficinas.Count;
    //     totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

    //     // Asigna una nueva lista a `listaOficinas` con los elementos de la página actual
    //     listaOficinas = allOficinas
    //         .Skip((currentPage - 1) * pageSize)
    //         .Take(pageSize)
    //         .ToList();

    //     // Asigna una nueva lista a `cantidadEstaciones` para evitar acumulación
    //     cantidadEstaciones = new List<int>();

    //     foreach (var oficina in listaOficinas)
    //     {
    //         cantidadEstaciones.Add(await estacionTrabajoControlador.estacionesPorOficina(oficina.OficinaID));
    //     }
    // }

    // private async Task CargarPagina()
    // {
    //     var allOficinas = await oficinaControlador.ListarOficinas();
    //     totalItems = allOficinas.Count;
    //     totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

    //     // Asigna una nueva lista a `listaOficinas` con los elementos de la página actual
    //     listaOficinas = allOficinas
    //         .Skip((currentPage - 1) * pageSize)
    //         .Take(pageSize)
    //         .ToList();
    // }

    private async Task CargarPagina()
    {
        var allOficinas = await oficinaControlador.ListarOficinas();
        totalItems = allOficinas.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        // Cargar la lista de oficinas en la página actual
        listaOficinas = allOficinas
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        // Asignar las cantidades de estaciones solo para las oficinas en la página actual
        cantidadEstaciones = new List<int>();

        foreach (var oficina in listaOficinas)
        {
            cantidadEstaciones.Add(await estacionTrabajoControlador.estacionesPorOficina(oficina.OficinaID));
        }
    }

    async Task seleccionarOficinaEliminar(int oficinaID)
    {
        oficinaEliminar = listaOficinas.Find(x => x.OficinaID == oficinaID);
    }
    async Task seleccionarOficinaActualizar(int oficinaID)
    {
        oficinaActualizar = listaOficinas.Find(x => x.OficinaID == oficinaID);
    }
    async Task EliminarEstaciones(int oficinaID)
    {
        estacionTrabajoControlador.EliminarEstacionesPorOficina(oficinaID);
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }

}
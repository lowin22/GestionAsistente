@page "/mostrar-badge"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@layout LayoutPrincipal
@attribute [Authorize(Roles = "Usuario, Administrador")]
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> RolManager

<h3>MostrarBadge</h3>

<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered">
            <thead style="text-align: center;">
                <tr style="text-align: center">
                    <th>Acciones</th>
                    <th>Número Badge</th>
                    <th>Horario</th>
                    <th>Ocupado</th>
                    <th>Unidad</th>
                    <th>Activo</th>
                    <th>Justificación</th>
                </tr>
            </thead>
            <tbody>
                <tr> 
                <th></th>
                <th>
                        <input type="search" @bind="badgeABuscar" @oninput="BusquedaPorNumero" placeholder="Buscar por número de badge" style="width: 80%; text-align:center" />
                </th>
                    <th></th>
                    <th></th>
                    <th> <input type="search" @bind="badgePorUnidad" @oninput="BusquedaPorUnidad" placeholder="Buscar por Unidad" style="width: 80%; text-align:center" /> </th>
                    <th></th>
                    <th></th>
                </tr>
                

                @if (string.IsNullOrEmpty(badgeABuscar) && string.IsNullOrEmpty(badgePorUnidad))
                {
                    if (listaBadgePaginacion == null || !listaBadgePaginacion.Any())
                    {
                        <tr>
                            <td colspan="6">No se encontraron resultados</td>
                        </tr>
                    }
                    else{
                        @foreach (var badge in listaBadgePaginacion)
                        {
                            <tr>
                                <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ModificarBadge" @onclick="() => seleccionarEditarBadge(badge.BadgeID)">
                                        <!-- Icono SVG para editar -->
                                        <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                            <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                        </svg>
                                    </button>
                                    <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => seleccionarBadgeEliminar(badge.BadgeID)">
                                        <!-- Icono SVG para eliminar -->
                                        <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                            <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                        </svg>
                                    </button>
                                </td>
                                <td>@badge.BadgeID</td>
                                <td>@badge.Horario</td>
                                <td>@(badge.Ocupado ? "Sí" : "No")</td>
                                <td>@badge.Unidad?.Nombre</td>
                                <td>@(badge.Activo ? "Sí" : "No")</td>
                                <td>@badge.Justificacion</td>
                            </tr>
                        }
                    }
                }
                else if (badgesBuscarPorNumero != null && badgesBuscarPorNumero.Any())
                {
                    @foreach (var badge in badgesBuscarPorNumero)
                    {
                        <tr>
                            <td>
                            <button class="btn" data-bs-toggle="modal" data-bs-target="#ModificarBadge" @onclick="() => seleccionarEditarBadge(badge.BadgeID)">
                                    <!-- Icono SVG para editar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                    </svg>
                                </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => seleccionarBadgeEliminar(badge.BadgeID)">
                                    <!-- Icono SVG para eliminar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                    </svg>
                                </button>
                            </td>
                            <td>@badge.BadgeID</td>
                            <td>@badge.Horario</td>
                            <td>@(badge.Ocupado ? "Sí" : "No")</td>
                            <td>@badge.Unidad?.Nombre</td>
                            <td>@(badge.Activo ? "Sí" : "No")</td>
                            <td>@badge.Justificacion</td>
                        </tr>
                    }
                }
                else if (badgesBuscarPorUnidad != null && badgesBuscarPorUnidad.Any())
                {
                    @foreach (var badge in badgesBuscarPorUnidad)
                    {
                        <tr>
                            <td>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ModificarBadge" @onclick="() => seleccionarEditarBadge(badge.BadgeID)">
                                    <!-- Icono SVG para editar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                    </svg>
                                </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => seleccionarBadgeEliminar(badge.BadgeID)">
                                    <!-- Icono SVG para eliminar -->
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                    </svg>
                                </button>
                            </td>
                            <td>@badge.BadgeID</td>
                            <td>@badge.Horario</td>
                            <td>@(badge.Ocupado ? "Sí" : "No")</td>
                            <td>@badge.Unidad?.Nombre</td>
                            <td>@(badge.Activo ? "Sí" : "No")</td>
                            <td>@badge.Justificacion</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>



<div class="modal fade" id="ConfirmarEliminar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h5 class="modal-title" id="ConfirmarEliminar">¿Deshabilitar badge?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fs-5">Esta acción deshabilitara el badge seleccionado.</p>
                <p class="text-danger">¿Estás seguro de que deseas deshabilitar este badge?</p>
            </div>
            <div class="text-center modal-body">
                <label for="justificacion">Justificación:</label>
                <InputText id="justificacion" class="form-control"
                    @bind-Value="badge.Justificacion"
                />
                </div>

           

            <div class="modal-footer justify-content-center">
                <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => EliminarBadge(eliminarBadge.BadgeID)">
                    Confirmar
                </button>
                <button class="btn btn-danger" data-bs-dismiss="modal">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModificarBadge" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ModificarBadge">Actualizar Badge</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="badge" OnValidSubmit="ModificarBadge" FormName="modificarBadgeForm">

                    <div class="mb-3">
                        <label for="horaInicio">Hora de Inicio</label>
                        <InputSelect id="horaInicio" class="form-select" @bind-Value="horaInicio" @oninput="OnHorarioChanged">
                            <option value="">Seleccione la hora de inicio</option>
                            @foreach (var hora in horasDelDiaInicio)
                            {
                                <option value="@hora">@hora</option>
                            }
                        </InputSelect>
                    </div>


                    <div class="mb-3">
                        <label for="horaFinal">Hora de Final</label>
                        <InputSelect id="horaFinal" class="form-select" @bind-Value="horaFinal">
                            <option value="">Seleccione la hora de finalización</option>
                            @foreach (var hora in horasDelDiaFinal)
                            {
                                <option value="@hora">@hora</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="unidadID" class="form-label">Unidad</label>
                        <InputSelect id="unidadID" class="form-control" @bind-Value="badge.UnidadID">
                            <option value="">Sin unidad</option>
                            @foreach (var unidad in listaUnidades)
                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <InputCheckbox @bind-Value="badge.Activo" /> Activo
                    </div>

                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" disabled="@EsFormularioActualizarInvalido()">Actualizar badge</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="mt-3 text-center custom-margin" style="padding-bottom: 5em;">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">
        Siguiente
    </button>
</div>

@if (notificarUsuario != null)
{
    <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content custom-modal">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmación</h5>
                    <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@notificarUsuario</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private AuthenticationState authState;
    private string notificarUsuario;
    private ClaimsPrincipal usuarioAutenticado;
    private string nombreUsuarioAutenticado;
    private ApplicationUser usuarioIdentity;

    private ReporteControlador reporteControlador = new ReporteControlador();
    private ReporteBadge reporteBadge = new ReporteBadge();

    bool exito = false;
    string mensaje = "";

    UnidadControlador unidadControlador = new UnidadControlador();

    BadgeControlador badgeControlador = new BadgeControlador();

    AsistenteControlador asistenteControlador = new AsistenteControlador();

    Asistente asistente = new Asistente();

    string horaInicio, horaFinal = "", horario;
    string simboloRangoHoras = "a";
    private string badgeABuscar, badgePorUnidad;

    private List<Badge> badgesBuscarPorNumero = new List<Badge>();
    private List<Badge> badgesBuscarPorUnidad = new List<Badge>();

    List<Badge> listaBadge = new List<Badge>();

    List<Badge> listaBadgePaginacion = new List<Badge>();

    List<Unidad> listaUnidades = new List<Unidad>();

    private HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    private HistorialAcciones historialAcciones = new HistorialAcciones
    {
    };

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;

    Badge badge = new Badge
        {
            Unidad = new Unidad()
        };

    Badge actualizarBadge = new Badge
        {
            Unidad = new Unidad()
        };

    Badge eliminarBadge = new Badge
        {
            Unidad = new Unidad()
        };

    // Lista de horas (de 7 a 20)
    private List<string> horasDelDiaInicio = new()
    {
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00"
    };

    private List<string> horasDelDiaFinal = new()
    {

        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00"

    };

    private List<string> horasDelDiaCompletas = new()
    {

        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00"

    };

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        usuarioAutenticado = authState.User;

        // Comprobar si el usuario está autenticado y asignar valores
        if (usuarioAutenticado.Identity?.IsAuthenticated ?? false)
        {
            nombreUsuarioAutenticado = usuarioAutenticado.Identity.Name;

            // Obtener el usuario desde el UserManager
            usuarioIdentity = await UserManager.FindByNameAsync(nombreUsuarioAutenticado);

            // Asignar el nombre de usuario al historial de acciones
            historialAcciones.NombrePersona = nombreUsuarioAutenticado;

            // Asignar el nombre de usuario al reporte
            reporteBadge.NombreUsuario = nombreUsuarioAutenticado;
        }

        await CargarListaBadge();    

        listaUnidades = await unidadControlador.ListarUnidades();

        //si es usuario regular entonces mostrar en el select solo esa unidad
        if(usuarioIdentity.UnidadID != null)
        {
            listaUnidades = listaUnidades.Where(u => u.UnidadID == usuarioIdentity.UnidadID).ToList();
        }

        await CargarPagina();

    }

    private async Task seleccionarBadgeEliminar(int eliminarBadges)
    {
        eliminarBadge = listaBadge.FirstOrDefault(x => x.BadgeID == eliminarBadges);

        //por si previamente badge.Justificacion tiene un valor
        badge.Justificacion = "";
    }

    private async Task ReporteEliminar(int badgeID)
    {
        
        if(asistente != null)
        {
            reporteBadge.NumeroBadge = asistente.BadgeID ?? -1;
            //nombre completo
            reporteBadge.NombreAsistente = asistente.Persona.Nombre + " " + asistente.Persona.PrimerApellido + " " + asistente.Persona.SegundoApellido;
            reporteBadge.Accion = "Eliminar asignación de tarjeta";

            await reporteControlador.RegistrarReporte(reporteBadge);
        }

    }

    async Task EliminarBadge(int badgeID)
    {
        //await badgeControlador.EliminarBadge(badgeID);

        //se actualiza el activo y la justificaion
        eliminarBadge.Justificacion = badge.Justificacion;
        eliminarBadge.Activo = false;
        eliminarBadge.Ocupado = false;

        //obtener la lista de asistentes que tienen el badge
        List<Asistente> asistentes = await asistenteControlador.ListarAsistentes();

        //filtrar el asistente
        asistente = asistentes.FirstOrDefault(x => x.BadgeID == badgeID);

        (exito, mensaje) = await badgeControlador.ActualizarBadge(eliminarBadge);

        if (exito)
        {
            await ReporteEliminar(badgeID);
            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = "Desactivar badge: " + eliminarBadge.BadgeID;
            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            CargarListaBadge();

            CargarPagina();

            notificarUsuario = mensaje;

            StateHasChanged();
        }
        else
        {
            notificarUsuario = mensaje;
        }

    }


    private async Task BusquedaPorNumero(ChangeEventArgs e)
    {
        badgeABuscar = e.Value?.ToString(); // Asegúrate de que se actualice correctamente

        if (int.TryParse(badgeABuscar, out int badgeNumber))
        {
            badgesBuscarPorNumero = await badgeControlador.BuscarBadgesPorNumero(badgeNumber);
        }
        else
        {
            badgesBuscarPorNumero.Clear(); // Limpia la lista si el input no es un número válido
        }
    }

    private async Task BusquedaPorUnidad(ChangeEventArgs e)
    {
        badgePorUnidad = e.Value?.ToString(); // Obtiene el valor del input

        if (!string.IsNullOrWhiteSpace(badgePorUnidad)) // Verifica si el nombre de la unidad es válido
        {
            badgesBuscarPorUnidad = await badgeControlador.BuscarBadgesPorNombreUnidad(badgePorUnidad);
        }
        else
        {
            badgesBuscarPorUnidad.Clear(); // Limpia la lista si el input está vacío o es nulo
        }
    }



    async Task seleccionarEditarBadge(int badgeID)
    {

        actualizarBadge = listaBadge.Find(b => b.BadgeID == badgeID);

        //partir las horas en dos variables para mostrarlas en el formulario
        var horas = actualizarBadge.Horario.Split(simboloRangoHoras);

        badge.Justificacion = actualizarBadge.Justificacion;
        badge.UnidadID = actualizarBadge.UnidadID;
        badge.Horario = actualizarBadge.Horario;
        badge.BadgeID = actualizarBadge.BadgeID;
        badge.Ocupado = actualizarBadge.Ocupado;
        badge.Unidad = actualizarBadge.Unidad;
        badge.Activo = actualizarBadge.Activo;

        //actualizar la variable horainicio y horafinal para la parte visual cuando se actualiza el badge
        horaInicio = horas[0].Trim();
        horaFinal = horas[1].Trim();

        //actualizar el horario select
        var horaInicioSeleccionada = horaInicio;

        if (!string.IsNullOrEmpty(horaInicioSeleccionada))
        {
            horasDelDiaFinal = horasDelDiaCompletas
                .Where(h => string.Compare(h, horaInicioSeleccionada) > 0)
                .ToList();
        }

        // horaFinal = horasDelDiaFinal.FirstOrDefault();
        //fin actualizar horario select
        StateHasChanged();

    }

    private async Task ModificarBadge()
    {

        try
        {

            badge.Horario = $"{horaInicio} {simboloRangoHoras} {horaFinal}";

            (exito, mensaje) = await badgeControlador.ActualizarBadge(badge);

            if (exito)
            {

                //Establecer propiedades para historialAcciones de registrar
                historialAcciones.Accion = $"Actualizar badge: {actualizarBadge.Unidad?.Nombre ?? "Sin unidad"} a {badge.Unidad?.Nombre ?? "Sin unidad"}";

                historialAcciones.Fecha = DateTime.Now;

                await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

                CargarListaBadge();

                CargarPagina();

                notificarUsuario = mensaje;

                StateHasChanged();
            }
            else
            {
                notificarUsuario = mensaje;
            }

        }
        catch (Exception ex)
        {
            notificarUsuario = "Ha ocurrido un error";
        }

    }

    private async Task CargarListaBadge()
    {
        listaBadge.Clear();
        //Inicio Listar usuarios que no sean administradores
        listaBadge = await badgeControlador.ListarBadge();
        //filtrar segun el usuario

        //si es usuario regular
        if (usuarioIdentity.UnidadID != null)
        {
            listaBadge = listaBadge.Where(x => x.UnidadID == usuarioIdentity.UnidadID).ToList();
        }
    }

    private async Task OnHorarioChanged(ChangeEventArgs e)
    {
        var horaInicioSeleccionada = e.Value?.ToString();

        if (!string.IsNullOrEmpty(horaInicioSeleccionada))
        {
            horasDelDiaFinal = horasDelDiaCompletas
                .Where(h => string.Compare(h, horaInicioSeleccionada) > 0)
                .ToList();
        }

        horaFinal = horasDelDiaFinal.FirstOrDefault();

        StateHasChanged();

    }

    private bool EsFormularioActualizarInvalido()
    {
        return string.IsNullOrEmpty(horaInicio) || string.IsNullOrEmpty(horaFinal);
    }

    private async Task CargarPagina()
    {
        var allBadges = listaBadge;
        totalItems = allBadges.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        listaBadgePaginacion = allBadges
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }

    private void CerrarModal()
    {
        notificarUsuario = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }
}

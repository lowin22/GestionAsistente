@page "/mostrar-horario/{id:int}"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@rendermode InteractiveServer

<h3>Mostrar Horarios por Estación de Trabajo</h3>

<div class="accordion" id="accordionHorarios">
    
    @foreach (var estacion in horarioControlador.horariosAgrupados)
    {
        <div class="accordion" id="accordionExample">
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading@(estacion.EstacionTrabajoID)">
                    <button class="accordion-button" type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapse@(estacion.EstacionTrabajoID)"
                            aria-expanded="true"
                            aria-controls="collapse@(estacion.EstacionTrabajoID)">
                        Accordion Item #@(estacion.EstacionTrabajoID)
                    </button>
                </h2>
               
        
        @foreach (var horario in horarioControlador.renderizarHorario)
        {
            
           
            @if ( estacion.EstacionTrabajoID==horario.EstacionTrabajoID)
                    {
                        horarioControlador.horarioTemporal.Add(horario);
                    }
                }
                        <div id="collapse@(estacion.EstacionTrabajoID)"
                     class="accordion-collapse collapse show"
                     aria-labelledby="heading@(estacion.EstacionTrabajoID)"
                     data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <button class="btn btn-danger"
                                @onclick="@(async () => await limpiarHararioEstacion(estacion.EstacionTrabajoID))"
                                aria-label="Limpiar Horario de Estación @estacion.EstacionTrabajoID">
                            Limpiar Horario
                        </button>
                                <div class="table-responsive">
                                    <table class="table table-bordered">
                                        <thead class="table-light">
                                            <tr>
                                                <th scope="col" class="text-center">Hora</th>
                                                @foreach (var day in horarioControlador.diasDeLaSemana)
                                                {
                                                    <th scope="col" class="text-center">@day</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var hour in horarioControlador.horasFijas)
                                            {
                                                <tr>
                                                    <th scope="row" class="table-light text-center">@hour</th>
                                                    @foreach (var dia in horarioControlador.diasDeLaSemana)
                                                    {
                                                <td style="min-width: 100px; height: 50px;" class="@GetCellClass(hour, dia,  horarioControlador.horarioTemporal)">
                                                    @if (HasReservation(hour, dia, horarioControlador.horarioTemporal))
                                                            {
                                                        var horarioD = GetHorario(hour, dia, horarioControlador.horarioTemporal);
                                                                if (horarioD != null)
                                                                {
                                                                    <div class="reservation-info">
                                                                        <small>
                                                                            @(horarioD.Asistente?.Persona?.Nombre ?? "Sin asignar")
                                                                            <br />
                                                                            @horarioD.HoraInicio.ToString("HH:mm") - @horarioD.HoraFin.ToString("HH:mm")
                                                                        </small>
                                                                    </div>
                                                                }
                                                            }
                                                        </td>

                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                    </div>
                </div>
               
         
            </div>
        </div>
        horarioControlador.horarioTemporal.Clear();
    }
</div>

<style>
    .reserved {
        background-color: #e3f2fd;
    }

    .reservation-info {
        font-size: 0.8em;
        padding: 2px;
    }

    .accordion-button:not(.collapsed) {
        background-color: #e7f1ff;
        color: #0c63e4;
    }

    .accordion-button:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgb(13 110 253 / 25%);
    }

    .accordion-item {
        margin-bottom: 0.5rem;
    }
</style>

@code {
    [Parameter]
    public int id { get; set; }

    public HorarioControlador horarioControlador = new HorarioControlador();

    protected override async Task OnInitializedAsync()
    {
        await horarioControlador.ListarHorariosPorOficinaAgrupados(id);
    }

    private string GetCellClass(string hour, string dia, List<Horario> horarios)
    {
        return HasReservation(hour, dia, horarios) ? "reserved" : "";
    }

    private bool HasReservation(string hour, string dia, List<Horario> horarios)
    {
        if (horarios == null) return false;

        var hourTime = TimeSpan.Parse(hour);
        return horarios.Any(h =>
            h.Dia == dia &&
            h.HoraInicio.TimeOfDay <= hourTime &&
            h.HoraFin.TimeOfDay >= hourTime);
    }

    private Horario GetHorario(string hour, string dia, List<Horario> horarios)
    {
        if (horarios == null) return null;

        var hourTime = TimeSpan.Parse(hour);
        return horarios.FirstOrDefault(h =>
            h.Dia == dia &&
            h.HoraInicio.TimeOfDay <= hourTime &&
            h.HoraFin.TimeOfDay >= hourTime);
    }
    private async Task limpiarHararioEstacion(int estacionTrabajoID)
    {
       
        // Espera a que termine la operación de limpieza
        var resultado = await this.horarioControlador.limpiarHararioEstacion(estacionTrabajoID);
        if (resultado)
        {
            // Solo si la limpieza fue exitosa, actualiza la lista
            await horarioControlador.ListarHorariosPorOficinaAgrupados(id);
            StateHasChanged();
        }
    }
   
}

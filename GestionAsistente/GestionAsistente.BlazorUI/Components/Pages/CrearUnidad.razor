@page "/crear-unidad"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@layout LayoutPrincipal
@rendermode InteractiveServer

@* <h1>Crear unidades</h1> *@

<h3>@(esEdicion ? "Actualizar Unidad" : "Crear Unidad")</h3>

@* <EditForm Model="unidad" OnValidSubmit="RegistrarUnidad" FormName="crearRegistrarUnidad"> *@
<EditForm Model="unidad" OnValidSubmit="ProcesarUnidad" FormName="crearRegistrarUnidad">

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre Unidad:</label>
        <InputText id="nombre" class="form-control" @bind-Value="unidad.Nombre" />
    </div>

    @* <button type="submit" class="btn btn-primary">Registrar</button> *@
    <button type="submit" class="btn btn-primary">
        @(esEdicion ? "Actualizar" : "Registrar")
    </button>
</EditForm>

@if (mensajeExito != null)
{
    <div class="alert alert-success">
        @mensajeExito
    </div>
}
@if (mensajeError != null)
{
    <div class="alert alert-danger">
        @mensajeError
    </div>
}

<!-- Tabla de Unidades -->
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered">
            <thead style="text-align: center;">
                <tr style="text-align: center">
                    <th>Acciones</th>
                    <th>Unidad</th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @if (listaUnidades != null)
                {
                    @foreach (var unidad in listaUnidades)
                    {
                        <tr>
                            <td>
                                <button class="btn" @onclick="() => EditarUnidad(unidad.UnidadID)">
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                        <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                    </svg>
                                </button>
                                <button class="btn" data-bs-toggle="modal" data-bs-target="#ConfirmarEliminar" @onclick="() => EliminarUnidad(unidad.UnidadID)">
                                    <svg width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                    </svg>
                                </button>
                            </td>
                            <td>@unidad.UnidadID</td>
                            <td>@unidad.Nombre</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<div style="text-align: center; margin-top: 1rem;">
    <button @onclick="PaginaAnterior" class="btn btn-secondary" disabled="@(!TienePaginaAnterior)">Anterior</button>
    <span>Página @paginaActual de @paginasTotales</span>
    <button @onclick="PaginaSiguiente" class="btn btn-secondary" disabled="@(!TienePaginaSiguiente)">Siguiente</button>
</div>

<!-- Modal de confirmación -->
<div class="modal fade" id="ConfirmarEliminar" tabindex="-1" aria-labelledby="ConfirmarEliminarLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ConfirmarEliminarLabel">Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (mensajeExitoEliminar == null)
                {
                    <p>¿Estás seguro que deseas eliminar esta unidad?</p>
                }
                else
                {
                    <p>@mensajeExitoEliminar</p>
                }
            </div>
            <div class="modal-footer">
                @if (mensajeExitoEliminar == null)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminarUnidad">Eliminar</button>
                }
                else
                {
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="CerrarModal">Aceptar</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    UnidadControlador unidadControlador = new UnidadControlador();
    Unidad unidad = new Unidad();
    
    HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    HistorialAcciones historialAcciones = new HistorialAcciones
    {
        NombrePersona = "UsuarioSesion"
    };

    string mensajeExito;
    string mensajeError;
    List<Unidad> listaUnidades = new List<Unidad>();
    List<Unidad> listaUnidadesPagina = new List<Unidad>();

    private int paginaActual = 1;
    private int tamanioPagina = 10;
    private int paginasTotales => (int)Math.Ceiling((double)listaUnidades.Count / tamanioPagina);

    bool esEdicion = false; // Variable para controlar si estamos en modo edición
    int unidadAEliminarID; // Variable para guardar el ID de la unidad a eliminar
    string mensajeExitoEliminar;
    
    Unidad unidadActualizar = new Unidad()
    {    // Unidad = new Unidad()
    };
    Unidad unidadEliminar = new Unidad()
    {    // Unidad = new Unidad()
    };

    protected override async Task OnInitializedAsync()
    {
        listaUnidades = await unidadControlador.ListarUnidades(); 

        ActualizarListaPaginada();
    }

    private async Task ProcesarUnidad()
    {
        if (esEdicion)
        {
            await ActualizarUnidad();
        }
        else
        {
            await RegistrarUnidad();
        }
    }

    private async Task RegistrarUnidad()
    {
        try
        {
            bool exito = await unidadControlador.RegistrarUnidad(unidad);

            if (exito)
            {
                //Establecer propiedades para historialAcciones de registrar
                historialAcciones.Accion = "Registrar unidad: " + unidad.Nombre;
                historialAcciones.Fecha = DateTime.Now;

                await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

                mensajeExito = "La unidad fue registrada exitosamente.";
                mensajeError = null;
                unidad = new Unidad();
            }
            else
            {
                mensajeError = "Hubo un error al registrar la unidad.";
                mensajeExito = null;
            }

        } 
        catch (Exception ex)
        {
            mensajeError = ex.Message; // Muestra el mensaje de la excepción
            mensajeExito = null;
        }
        await RecargarUnidades();
        //StateHasChanged();
    }

    private async Task ActualizarUnidad()
    {
        var (mensaje, exito) = await unidadControlador.ActualizarUnidad(unidad);

        if (exito)
        { 
            historialAcciones.Accion = "Actualizar unidad: " + unidadActualizar.Nombre + " a " + unidad.Nombre;
            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            mensajeExito = "La unidad fue actualizada exitosamente.";
            mensajeError = null;
            unidad = new Unidad();
            esEdicion = false; // Reiniciar el estado de edición
        }
        else
        {
            mensajeError = "Hubo un error al actualizar la unidad.";
            mensajeExito = null;
        }
        await RecargarUnidades();
    }

    private async Task EditarUnidad(int unidadID)
    {
        unidadActualizar = listaUnidades.Find(x => x.UnidadID == unidadID);

        unidad.UnidadID = unidadActualizar.UnidadID;
        unidad.Nombre = unidadActualizar.Nombre;

        if (unidadActualizar != null)
        {
            //unidad = unidadActualizar;
            esEdicion = true; // Cambiamos a modo edición
        }
    }

    private async Task EliminarUnidad(int unidadID)
    {
        unidadAEliminarID = unidadID; 
        mensajeExitoEliminar = null; 
    }

    async Task ConfirmarEliminarUnidad()
    {
        /*var unidadParaEliminar*/
        unidadEliminar = listaUnidades.Find(x => x.UnidadID == unidadAEliminarID);

        var (mensaje, exito) = await unidadControlador.EliminarUnidad(unidadAEliminarID);

        if (exito)
        {
            historialAcciones.Accion = "Eliminar unidad: " + unidadEliminar.Nombre;
            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            mensajeExitoEliminar = "La unidad fue eliminada con éxito.";
            listaUnidades = await unidadControlador.ListarUnidades();  // Actualiza la lista
        }
        else
        {
            mensajeExitoEliminar = "Hubo un error al intentar eliminar la unidad.";
        }

        StateHasChanged(); 
    }

    void CerrarModal()
    {
        mensajeExitoEliminar = null; // Limpia el mensaje para la próxima eliminación
        StateHasChanged();
    }

    private async Task RecargarUnidades()
    {
        listaUnidades = await unidadControlador.ListarUnidades();
        StateHasChanged();
    }

    private void ActualizarListaPaginada()
    {
        listaUnidadesPagina = listaUnidades
            .Skip((paginaActual - 1) * tamanioPagina)
            .Take(tamanioPagina)
            .ToList();
    }

    private void PaginaAnterior()
    {
        if (TienePaginaAnterior)
        {
            paginaActual--;
            ActualizarListaPaginada();
        }
    }

    private void PaginaSiguiente()
    {
        if (TienePaginaSiguiente)
        {
            paginaActual++;
            ActualizarListaPaginada();
        }
    }

    private bool TienePaginaAnterior => paginaActual > 1;
    private bool TienePaginaSiguiente => paginaActual < paginasTotales;
}

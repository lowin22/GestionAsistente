@page "/mostrar-asistentes"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@layout LayoutPrincipal
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Usuario, Administrador")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager


<h2 class="mb-4">Mostrar Asistentes</h2>
<div class="col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto; top: 0px; left: 0px;">
    <div class="table-responsive col-md-12 col-xs-12 col-sm-12" style="text-align: center; overflow-y: auto;">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Opciones</th>
                    <th>Usuario</th>
                    <th>Nombre</th>
                    <th>Contraseña</th>
                    <th>Encargado</th>
                    <th>Accesos</th>
                    <th>Badge</th>
                    <th>Unidad</th>
                    <th>Horario</th>
                </tr>
            </thead>
            <tbody>

                <tr> 
                <th></th>
                    <th></th>
                <th>
                        <input type="search" @bind="asistenteABuscar" @oninput="BusquedaAsincrona" placeholder="Buscar por nombre" style="width: 80%; text-align:center" />
                </th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>

                @if (string.IsNullOrEmpty(asistenteABuscar))
                {

                    @if (listaAsistentes == null || !listaAsistentes.Any())
                    {
                        <tr>
                            <td colspan="8">No se encontraron asistentes.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var asistente in listaAsistentes)
                        {
                            <tr>
                                <td>

                                    <button @onclick="() => EliminarAsistente(asistente.AsistenteID)">Eliminar</button>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#ActualizarAsistente" @onclick="() => PrepararActualizacion(asistente.AsistenteID)">
                                        Actualizar
                                    </button>
                                </td>
                                <td>@asistente.nombreUsuario</td>
                                <td>@($"{asistente.Persona?.Nombre} {asistente.Persona?.PrimerApellido} {asistente.Persona?.SegundoApellido}")</td>
                                <td>@asistente.Contrasenia</td>
                                <td>@($"{asistente.Encargado?.Persona.Nombre} {asistente.Encargado?.Persona.PrimerApellido} {asistente.Encargado?.Persona.SegundoApellido}")</td>
                                <td>@asistente.Accesos</td>
                                <td>@asistente.BadgeID</td>
                                <td>@asistente.Unidad?.Nombre</td>
                                <td>
                                    <button class="btn" data-bs-toggle="modal" data-bs-target="#horario" @onclick="() => traerOficinas(asistente.AsistenteID)">

                                        <span>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
                                                <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5z" />
                                                <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64l.012-.013.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5M8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3" />
                                            </svg>
                                        </span>
                                    </button>
                                </td>
                            </tr>
                        }
                    }

                }else if (asistenteABuscar != null && asistentesEncontrados.Any())
                {
                        @foreach (var asistente in asistentesEncontrados)
                        {
                            <tr>
                                <td>

                                    <button @onclick="() => EliminarAsistente(asistente.AsistenteID)">Eliminar</button>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#ActualizarAsistente" @onclick="() => PrepararActualizacion(asistente.AsistenteID)">
                                        Actualizar
                                    </button>
                                </td>
                                <td>@asistente.nombreUsuario</td>
                                <td>@($"{asistente.Persona?.Nombre} {asistente.Persona?.PrimerApellido} {asistente.Persona?.SegundoApellido}")</td>
                                <td>@asistente.Contrasenia</td>
                                <td>@($"{asistente.Encargado?.Persona.Nombre} {asistente.Encargado?.Persona.PrimerApellido} {asistente.Encargado?.Persona.SegundoApellido}")</td>
                                <td>@asistente.Accesos</td>
                                <td>@asistente.BadgeID</td>
                                <td>@asistente.Unidad?.Nombre</td>
                                <td>
                                    <button class="btn" data-bs-toggle="modal" data-bs-target="#horario" @onclick="() => traerOficinas(asistente.AsistenteID)">

                                        <span>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
                                                <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5z" />
                                                <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64l.012-.013.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5M8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3" />
                                            </svg>
                                        </span>
                                    </button>
                                </td>
                            </tr>
                        }                  

                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="ActualizarAsistente" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ActualizarAsistente">Actualizar Asistente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="asistente" FormName="actualizarAsistenteForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="usuario" class="form-label">Usuario</label>
                        <InputText id="usuario" class="form-control" @bind-Value="asistente.nombreUsuario" />
                    </div>
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="asistente.Persona.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="primerApellido" class="form-label">Primer Apellido</label>
                        <InputText id="primerApellido" class="form-control" @bind-Value="asistente.Persona.PrimerApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="segundoApellido" class="form-label">Segundo Apellido</label>
                        <InputText id="segundoApellido" class="form-control" @bind-Value="asistente.Persona.SegundoApellido" />
                    </div>
                    <div class="mb-3">
                        <label for="contrasenia" class="form-label">Contraseña</label>
                        <InputText id="contrasenia" class="form-control" @bind-Value="asistente.Contrasenia" />
                    </div>
                    <div class="mb-3">
                        <label for="unidadID" class="form-label">Unidad</label>
                        <InputSelect id="unidadID" class="form-control" @bind-Value="asistente.UnidadID" @oninput="OnUnidadChanged">
                            <option value="0">-- Seleccione una unidad --</option>
                            @foreach (var unidad in listaUnidades)
                            {
                                <option value="@unidad.UnidadID">@unidad.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="encargadoID" class="form-label">Encargado</label>
                        <InputSelect id="encargadoID" class="form-control" @bind-Value="asistente.EncargadoID">
                            <option value="">-- Seleccione un encargado --</option>
                            @foreach (var encargado in listaEncargados)
                            {
                                <option value="@encargado.EncargadoID">@($"{encargado?.Persona.Nombre} {encargado?.Persona.PrimerApellido} {encargado?.Persona.SegundoApellido}")</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="accesos" class="form-label">Accesos</label>
                        <InputTextArea id="accesos" class="form-control" @bind-Value="asistente.Accesos" />
                    </div>
                    <div class="mb-3">
                        <label for="BadgeID">Badge</label>
                        <InputSelect id="BadgeID" class="form-select" @bind-Value="asistente.BadgeID">
                            <option value="">-- Seleccione el badge --</option>
                            @foreach (var badge in listaBadge)
                            {
                                <option value="@badge.BadgeID">@badge.BadgeID</option>
                            }
                        </InputSelect>
                    </div>
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" @onclick="GuardarActualizacionAsistente">Guardar Cambios</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="horario" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="horario">Actualizar Encargado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body row">
                <div class="col-md-6">
                    <label for="Oficina">Oficina</label>
                    <InputSelect id="OficinaID" class="form-select" @bind-Value="oficinaID" @oninput="OnEstacionChanged">
                        <option value="">Seleccione la oficina</option>
                        @foreach (var oficina in listaOficinas)
                        {
                            <option value="@oficina.OficinaID">@($"{oficina.Nombre}")</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label for="EstacionTrabajo">EstacionTrabajo</label>
                    <InputSelect id="EstacionTrabajo" class="form-select" @bind-Value="horario.EstacionTrabajoID">
                        <option value="">Seleccione la estación de trabajo</option>
                        @foreach (var estacionTrabajo in listaEstacionTrabajos)
                        {
                            <option value="@estacionTrabajo.EstacionTrabajoID">@($"{estacionTrabajo.Numero}")</option>
                        }
                    </InputSelect>
                </div>

                <div class="card-body">
                    <div class="row">
                        <div class="card mt-4 col-md-6">
                            <label for="diaSemana">Día</label>
                            <InputSelect id="diaSemana" class="form-select" @bind-Value="horario.Dia" @oninput="OnEstacionHorarioChanged">
                                <option value="">Seleccione el dia de la semana</option>
                                @foreach (var dia in horarioControlador.diasDeLaSemana)
                                {
                                    <option value="@dia">@dia</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="card mt-4 col-md-6">
                            <label for="horaInicio">Hora de Inicio</label>
                            <InputSelect id="horaInicio" class="form-select" @bind-Value="horaInicio" @oninput="OnEstacionHoraFinalChanged">
                                <option value="">Seleccione la hora de inicio</option>
                                @foreach (var hora in horarioControlador.horasDelDiaInicio)
                                {
                                    <option value="@hora">@hora</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="card mt-4 col-md-6">
                            <label for="horaFinal">Hora de Final</label>
                            <InputSelect id="horaFinal" class="form-select" @bind-Value="horaFinal">
                                <option value="">Seleccione la hora de finalización</option>
                                @foreach (var hora in horarioControlador.horasDelDiaFinal)
                                {
                                    <option value="@hora">@hora</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" @onclick="GuardarHorarioAsistente">Guardar horario</button>
            </div>
        </div>
    </div>
</div>
<div class="mt-3 text-center">
    <button @onclick="() => CambiarPagina(currentPage - 1)" class="btn btn-secondary" disabled="@(currentPage == 1)">
        Anterior
    </button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button @onclick="() => CambiarPagina(currentPage + 1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">
        Siguiente
    </button>
</div>

@code {
    private string? userName;
    private int? unidad;
    private ApplicationUser usuarioIdentity = new ApplicationUser { };
    private AsistenteControlador asistenteControlador = new AsistenteControlador();
    private UnidadControlador unidadControlador = new UnidadControlador();
    private EncargadoControlador encargadoControlador = new EncargadoControlador();
    private OficinaControlador oficinaControlador = new OficinaControlador();
    private EstacionTrabajoControlador estacionTrabajoControlador = new EstacionTrabajoControlador();
    private HorarioControlador horarioControlador = new HorarioControlador();
    private BadgeControlador badgeControlador = new BadgeControlador();
    private List<Asistente> listaAsistentes = new List<Asistente>();
    private List<Unidad> listaUnidades = new List<Unidad>();
    private List<Encargado> listaEncargados = new List<Encargado>();
    private List<Oficina> listaOficinas = new List<Oficina>();
    private List<Badge> listaBadge = new List<Badge>();
    private List<EstacionTrabajo> listaEstacionTrabajos = new List<EstacionTrabajo>();

    private string asistenteABuscar;
    private List<Asistente> asistentesEncontrados = new List<Asistente>();

    private HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    private HistorialAcciones historialAcciones = new HistorialAcciones
        {
            NombrePersona = "UsuarioSesion"
        };

    private Horario horario = new Horario()
        {
            Asistente = new Asistente()
            {
                Persona = new Persona()
            }
        };

    string horaInicio, horaFinal = "";
    private int oficinaID;
    private int estacionTrabajoID;
    private string diaSeleccionado;
    private string horaInicioSeleccionada;
    private string horaFinalSeleccionada;
    private Asistente asistente = new Asistente
        {
            Persona = new Persona(),
            Encargado = new Encargado()
            {
                Persona = new Persona()
            }

        };

    Asistente asistenteActualizado = new Asistente
        {
            Persona = new Persona(),
            Encargado = new Encargado()
            {
                Persona = new Persona()
            }
        };
    private bool unidadCambiada = false;

    // Propiedades de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;

            usuarioIdentity = await UserManager.FindByNameAsync(userName);

            unidad = usuarioIdentity.UnidadID;
        }
        if (unidad == null)
        {
            listaAsistentes = await asistenteControlador.ListarAsistentes();
        }
        else if (unidad != null)
        {
            listaAsistentes = await asistenteControlador.ListarAsistentes();
            listaAsistentes = listaAsistentes.Where(a => a.UnidadID == unidad).ToList();
        }


    }

    private async Task GuardarHorarioAsistente()
    {
        horario.AsistenteID = asistente.AsistenteID;
        horario.HoraInicio = DateTime.Parse(horaInicio);
        horario.HoraFin = DateTime.Parse(horaFinal);
        await horarioControlador.RegistrarHorario(horario);
        // Limpiar el formulario
        LimpiarFormulario();
    }
    private void LimpiarFormulario()
    {

        listaEstacionTrabajos.Clear();
        StateHasChanged();
    }


    private async Task PrepararActualizacion(int asistenteID)
    {
        listaUnidades = await unidadControlador.ListarUnidades();
        if (unidad != null)
        {
            listaUnidades.Where(a => a.UnidadID == unidad).ToList();
        }


        asistenteActualizado = listaAsistentes.Find(a => a.AsistenteID == asistenteID);

        asistente.AsistenteID = asistenteActualizado.AsistenteID;
        asistente.nombreUsuario = asistenteActualizado.nombreUsuario;
        asistente.Persona.Nombre = asistenteActualizado.Persona.Nombre;
        asistente.Persona.PrimerApellido = asistenteActualizado.Persona.PrimerApellido;
        asistente.Persona.SegundoApellido = asistenteActualizado.Persona.SegundoApellido;
        asistente.Contrasenia = asistenteActualizado.Contrasenia;
        asistente.EncargadoID = asistenteActualizado.EncargadoID;
        asistente.Accesos = asistenteActualizado.Accesos;
        asistente.BadgeID = asistenteActualizado.BadgeID;
        asistente.UnidadID = asistenteActualizado.UnidadID;
        asistente.Persona.PersonaID = asistenteActualizado.Persona.PersonaID;
        if (asistente.UnidadID != 0 && asistente.UnidadID != null)
        {
            await CargarEncargados(asistente.UnidadID);
            await CargarBadge(asistenteActualizado.UnidadID, asistente.BadgeID);
        }

    }
    private async Task OnUnidadChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int unidadId))
        {
            asistente.UnidadID = unidadId;

            if (unidadId != 0)
            {
                await CargarEncargados(unidadId);
                await CargarBadge(unidadId, asistente.BadgeID);
            }
            else
            {
                asistente.EncargadoID = 0;
                asistente.BadgeID = 0;

                listaEncargados = new List<Encargado>();
                listaBadge = new List<Badge>();
            }
        }
    }
    private async Task CargarEncargados(int? unidadId)
    {
        //unidad del usuario
        if (unidad == null)
        {   //unidad seleccionada
            if (unidadId != null)
            {
                listaEncargados = await encargadoControlador.ListarEncargadosPorID(unidadId);
            }
            else
            {
                listaEncargados = new List<Encargado>();
            }

        }
        else if (unidad != null)
        {
            listaEncargados = await encargadoControlador.ListarEncargadosPorID(unidad);
        }


    }
    private async Task CargarBadge(int? unidadId, int? badgeID)
    {

        if (unidad == null)
        {   //unidad seleccionada
            if (unidadId != 0)
            {
                listaBadge = await badgeControlador.ListarBadgePorUnidad(unidadId);
                if (badgeID != null)
                {
                    Badge badgeAsignado = await badgeControlador.ObtenerBadgePorId(badgeID);
                    listaBadge.Add(badgeAsignado);
                }

            }
            else
            {
                listaBadge = new List<Badge>();
            }
        }
        else if (unidad != null)
        {
            listaBadge = await badgeControlador.ListarBadgePorUnidad(unidad);
            if (badgeID != null)
            {
                Badge badgeAsignado = await badgeControlador.ObtenerBadgePorId(badgeID);
                listaBadge.Add(badgeAsignado);
            }
        }
    }

    private async Task EliminarAsistente(int asistenteID)
    {
        bool eliminado = await asistenteControlador.EliminarAsistente(asistenteID);
        if (eliminado)
        {
            listaAsistentes = await asistenteControlador.ListarAsistentes();

            //Establecer propiedades para historialAcciones de registrar
            historialAcciones.Accion = "Eliminar asistente: " + asistente.Persona.Nombre + " " +
            asistente.Persona.PrimerApellido + " " + asistente.Persona.SegundoApellido;
            historialAcciones.Fecha = DateTime.Now;

            await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);

            StateHasChanged();
        }
    }

    private async Task GuardarActualizacionAsistente()
    {
        if (asistente.UnidadID == 0)
        {
            asistente.Unidad = null;
            asistente.UnidadID = null;
            asistente.Badge = null;
            asistente.BadgeID = null;
            asistente.Encargado = null;
            asistente.EncargadoID = null;
        }

        bool actualizado = await asistenteControlador.ActualizarAsistente(asistente);
        listaAsistentes = await asistenteControlador.ListarAsistentes();
    }

    private bool puedeGuardar()
    {
        // No permitir guardar si la unidad ha cambiado y no se ha seleccionado un encargado
        return !unidadCambiada || asistente.EncargadoID != 0;
    }


    private async void traerOficinas(int asistenteID)
    {
        horario.Asistente.AsistenteID = asistenteID;
        listaOficinas = await oficinaControlador.ListarOficinas();

    }

    private async Task OnEstacionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int oficinaid))
        {
            listaEstacionTrabajos = await estacionTrabajoControlador.ListarEstacionPorOficina(oficinaid);
            StateHasChanged(); // Forzar la actualización de la UI
        }
    }
    private async Task OnEstacionHorarioChanged(ChangeEventArgs e)
    {
        await horarioControlador.ListarHorariosPorEstacionTrabajo(horario.EstacionTrabajoID, e.Value.ToString());
        StateHasChanged(); // Forzar la actualización de la UI

    }
    private async Task OnEstacionHoraFinalChanged(ChangeEventArgs e)
    {
        await horarioControlador.verificarHoraSeleccionar(e.Value.ToString());
        StateHasChanged(); // Forzar la actualización de la UI
    }


    private async Task BusquedaAsincrona(ChangeEventArgs e)
    {
        var nombreABuscar = e.Value?.ToString();

        if (!string.IsNullOrEmpty(nombreABuscar))
        {
            asistentesEncontrados = await asistenteControlador.BuscarAsistentePorNombre(nombreABuscar);
        }
        else
        {
            asistentesEncontrados.Clear();
        }
    }

    private async Task CargarPagina()
    {
        var allAsistentes = await asistenteControlador.ListarAsistentes();
        totalItems = allAsistentes.Count;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);

        listaAsistentes = allAsistentes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina > 0 && nuevaPagina <= totalPages)
        {
            currentPage = nuevaPagina;
            await CargarPagina();
        }
    }

}

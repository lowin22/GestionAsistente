@page "/crear-oficina"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@rendermode InteractiveServer

<h3 style="text-align: center;">Crear Oficina</h3>

<div class="row justify-content-center">
    <div class="col-md-4">
        <EditForm Model="oficina" OnValidSubmit="RegistrarOficina" FormName="crearOficinaForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <hr />

            <div class="form-floating mb-3">
                <InputText id="nombre" class="form-control" @bind-Value="oficina.Nombre" placeholder="Nombre" required/>
                <label for="nombre">Nombre</label>
            </div>

            <div class="form-floating mb-3">
                <InputNumber id="primerApellido" class="form-control" @bind-Value="cantidadEstaciones" placeholder="Cantidad de estaciones de trabajo" />
                <label for="primerApellido">Estaciones de trabajo</label>
            </div>

            <div style="text-align:center">
                <button type="submit" class="btn btn-primary">Registrar</button>
            </div>
        </EditForm>
    </div>

@if (mensajeExito != null)
{
    <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content custom-modal">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmación</h5>
                    <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@mensajeExito</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}


@if (mensajeError != null)
{
    <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content custom-modal">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="close" @onclick="CerrarModalError" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@mensajeError Error al registrar</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModalError">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}
</div>

@code {
    string mensajeExito;
    string mensajeError;
    int cantidadEstaciones = 1;
    Oficina oficina = new Oficina();
    EstacionTrabajo estacion = new EstacionTrabajo();
    bool isLoading = false; // Variable para controlar el estado de carga

    HistorialAccionesControlador historialAccionesControlador = new HistorialAccionesControlador();
    HistorialAcciones historialAcciones = new HistorialAcciones
    {
        NombrePersona = "UsuarioSesion"
    };

    private async Task RegistrarOficina()
    {
        isLoading = true; // Inicia el loader
        StateHasChanged(); // Actualiza el estado de la interfaz

        OficinaControlador oficinaControlador = new OficinaControlador();
        EstacionTrabajoControlador estacionTrabajoControlador = new EstacionTrabajoControlador();

        try
        {
            //valida que la oficina no exista
            if (await oficinaControlador.ExisteOficina(oficina.Nombre) == false)
            {
                int idOficina = await oficinaControlador.RegistrarOficina(oficina);

                for (int i = 1; i <= cantidadEstaciones; i++)
                {
                    estacion = new EstacionTrabajo()
                        {
                            OficinaID = idOficina,
                            Numero = i,
                            Estado = 0
                        };
                    await estacionTrabajoControlador.RegistrarEstacionTrabajo(estacion);

                    //Establecer propiedades para historialAcciones de registrar
                    historialAcciones.Accion = "Registrar oficina: " + oficina.Nombre;
                    historialAcciones.Fecha = DateTime.Now;
                    await historialAccionesControlador.RegistrarHistorialAcciones(historialAcciones);
                }

                if (idOficina > 0)
                {
                    mensajeExito = "Oficina registrada con éxito.";
                    mensajeError = null;

                    oficina.Nombre = "";
                    cantidadEstaciones = 1;
                }
                else
                {
                    mensajeExito = null;
                    mensajeError = "Hubo un problema al registrar la oficina.";
                }
            }
            else
            {
                mensajeExito = null;
                mensajeError = "Esta oficina ya existe.";
            }

        }
        catch (Exception ex)
        {
            mensajeError = $"Error: {ex.Message}";
            mensajeExito = null;
        }
        finally
        {
            isLoading = false; // Detiene el loader
            StateHasChanged(); // Actualiza la interfaz una vez más
        }
    }

    private void CerrarModal()
    {
        mensajeExito = null;
        mensajeError = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

    private void CerrarModalError()
    {
        mensajeError = null;
        mensajeExito = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

}

@page "/crear-oficina"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.Entidades
@rendermode InteractiveServer

<h3>Crear Oficina</h3>

<EditForm Model="oficina" OnValidSubmit="RegistrarOficina" FormName="crearOficinaForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="oficina.Nombre" />
    </div>

    <div class="mb-3">
        <label for="primerApellido" class="form-label">Estaciones de trabajo</label>
        <InputNumber id="primerApellido" class="form-control" @bind-Value="cantidadEstaciones" />
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@* <!-- Loader.razor -->
<div class="loader" style="display: @(IsLoading ? "block" : "none");">
    <div class="spinner-border" role="status">
        <span class="sr-only">Cargando...</span>
    </div>
</div> *@

@if (mensajeExito != null)
{
    <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content custom-modal">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmación</h5>
                    <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@mensajeExito</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}


@if (mensajeError != null)
{
    <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content custom-modal">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmación</h5>
                    <button type="button" class="close" @onclick="CerrarModalError" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@mensajeError Error al registrar</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModalError">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    string mensajeExito;
    string mensajeError;
    int cantidadEstaciones;
    Oficina oficina = new Oficina();
    EstacionTrabajo estacion = new EstacionTrabajo();
    bool isLoading = false; // Variable para controlar el estado de carga

    private async Task RegistrarOficina()
    {
        isLoading = true; // Inicia el loader
        StateHasChanged(); // Actualiza el estado de la interfaz

        OficinaControlador oficinaControlador = new OficinaControlador();
        EstacionTrabajoControlador estacionTrabajoControlador = new EstacionTrabajoControlador();

        try
        {
            int idOficina = await oficinaControlador.RegistrarOficina(oficina);

            for (int i = 1; i <= cantidadEstaciones; i++)
            {
                estacion = new EstacionTrabajo()
                {
                    OficinaID = idOficina,
                    Numero = i,
                    Estado = 0
                };
                await estacionTrabajoControlador.RegistrarEstacionTrabajo(estacion);
            }

            if (idOficina > 0)
            {
                mensajeExito = "Oficina registrada con éxito.";
                mensajeError = null;
            }
            else
            {
                mensajeExito = null;
                mensajeError = "Hubo un problema al registrar el encargado.";
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error: {ex.Message}";
            mensajeExito = null;
        }
        finally
        {
            isLoading = false; // Detiene el loader
            StateHasChanged(); // Actualiza la interfaz una vez más
        }
    }

    private void CerrarModal()
    {
        mensajeExito = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

    private void CerrarModalError()
    {
        mensajeError = null;
        StateHasChanged(); // Actualiza el estado para ocultar el modal en la interfaz
    }

}

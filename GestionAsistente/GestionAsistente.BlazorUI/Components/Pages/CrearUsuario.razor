@page "/crear-usuarios"
@using GestionAsistente.BlazorUI.Components.Layout
@using GestionAsistente.BlazorUI.Controlador
@using GestionAsistente.BlazorUI.Data
@using GestionAsistente.Entidades
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@layout LayoutPrincipal
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Usuario, Administrador")]

<PageTitle>Registro</PageTitle>

<h3 style="text-align: center;">Registro usuario</h3>

<div class="row justify-content-center">
    <div class="col-md-4">
    @*     <StatusMessage Message="@Mensaje" /> *@
        <EditForm Model="Input" method="post" OnValidSubmit="RegistrarUsuario" FormName="registro">
            <DataAnnotationsValidator />
            <hr />
            @* <ValidationSummary class="text-danger" role="alert" /> *@
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NombreUsuario" class="form-control" autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" />
                <label for="nombreusuario">Nombre de usuario</label>
                <ValidationMessage For="() => Input.NombreUsuario" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Contrasenna" class="form-control" autocomplete="new-password" aria-required="true" placeholder="contraseña" />
                <label for="contraseña">Contraseña</label>
                <ValidationMessage For="() => Input.Contrasenna" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmarContrasenna" class="form-control" autocomplete="new-password" aria-required="true" placeholder="confirmar contraseña" />
                <label for="confirmar-contraseña">Confirmar Contraseña</label>
                <ValidationMessage For="() => Input.ConfirmarContrasenna" class="text-danger" />
            </div>

            <div style="text-align:center">
                <button type="submit" class="w-100 btn btn-sm btn-primary" >Registrar</button>
            </div>
        </EditForm>
    </div>

    @if (notificarUsuario != null)
    {
        <div id="ModalsConfirmacion" class="modal fade show d-sm-inline-block" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content custom-modal">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmación</h5>
                        <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>@notificarUsuario</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btnAceptar" @onclick="CerrarModal">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private IEnumerable<IdentityError>? erroresIdentidad;

    [SupplyParameterFromForm]
    private ModeloEntrada Input { get; set; } = new ModeloEntrada();

    private string notificarUsuario;

    private string? Mensaje => erroresIdentidad is null ? null : $"Error: {string.Join(", ", erroresIdentidad.Select(error => error.Description))}";

    public async Task RegistrarUsuario(EditContext editContext)
    {
        var usuario = new ApplicationUser();

        await UserStore.SetUserNameAsync(usuario, Input.NombreUsuario, CancellationToken.None);

        var emailStore = ObtenerEmailStore();

        await emailStore.SetEmailConfirmedAsync(usuario, true, CancellationToken.None);

        var resultado = await UserManager.CreateAsync(usuario, Input.Contrasenna);

        if (!resultado.Succeeded)
        {
            erroresIdentidad = resultado.Errors;
            notificarUsuario = "Nombre de usuario ya existe";
            return;
        }

        if (resultado.Succeeded)
        {
            LimpiarFormulario();
            notificarUsuario = "Se insertó correctamente";
        }
    }

    private void CerrarModal()
    {
        notificarUsuario = null;
        StateHasChanged(); //Actualiza el estado para ocultar el modal en la interfaz
    }

    private void CerrarModalError()
    {
        notificarUsuario = null;
        StateHasChanged(); //Actualiza el estado para ocultar el modal en la interfaz
    }

    private IUserEmailStore<ApplicationUser> ObtenerEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("La interfaz de usuario predeterminada requiere una tienda de usuarios con soporte de correo electrónico.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private void LimpiarFormulario()
    {
        Input.NombreUsuario = "";
        Input.Contrasenna = "";
        Input.ConfirmarContrasenna = "";
    }

    private sealed class ModeloEntrada
    {
        [Required]
        [Display(Name = "Nombre de usuario")]
        public string NombreUsuario { get; set; } = "";

        [Required]
        [StringLength(30, ErrorMessage = "La contraseña debe tener al menos 6 caracteres y 30 como máximo.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Contrasenna { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar contraseña")]
        [Compare("Contrasenna", ErrorMessage = "La confirmación de la contraseña no coincide.")]
        public string ConfirmarContrasenna { get; set; } = "";
    }
}
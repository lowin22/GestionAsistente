@page "/register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager Navigation


<h3>Registro</h3>

<EditForm Model="registerModel" OnValidSubmit="RegisterUser" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Email" />
    </div>

    <div class="form-group mb-3">
        <label for="password">Contraseña</label>
        <InputText id="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Contraseña" type="password" />
    </div>

    <div class="form-group mb-3">
        <label for="confirmPassword">Confirmar Contraseña</label>
        <InputText id="confirmPassword" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirmar Contraseña" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>
    @if (errorMessages.Any())
    {
        <div class="alert alert-danger mt-3">
            @foreach (var error in errorMessages)
            {
                <div>@error</div>
            }
        </div>
    }


@code {
    private RegisterModel registerModel = new RegisterModel();
    private List<string> errorMessages = new List<string>();
    public string email = "hola";
    public string password = "hola";
    public string confirmPassword ="ojsas";
    private async Task RegisterUser()
    {
        Console.WriteLine(registerModel.Email);
        try
        {
            errorMessages.Clear();
            var user = new IdentityUser { UserName = registerModel.Email, Email = registerModel.Email };
            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                //Navigation.NavigateTo("/");
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    errorMessages.Add($"Error: {error.Description}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessages.Add($"Error inesperado: {ex.Message}");
            Console.WriteLine($"Error en registro: {ex}");
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido")]
        public string Email { get; set; } = "edwinloria@gmail.com";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Password { get; set; } = "123456";

        [Required(ErrorMessage = "La confirmación de contraseña es requerida")]
        [Compare("Password", ErrorMessage = "Las contraseñas no coinciden")]
        public string ConfirmPassword { get; set; }= "123456";
    }
}
// <auto-generated />
using System;
using GestionAsistente.BlazorUI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionAsistente.BlazorUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241029232554_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.AdministradorEF", b =>
                {
                    b.Property<int>("AdministradorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministradorID"));

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.Property<int>("RolID")
                        .HasColumnType("int");

                    b.Property<int>("UnidadID")
                        .HasColumnType("int");

                    b.Property<string>("usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdministradorID");

                    b.HasIndex("PersonaID");

                    b.HasIndex("RolID");

                    b.HasIndex("UnidadID");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.AsistenteEF", b =>
                {
                    b.Property<int>("AsistenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenteID"));

                    b.Property<string>("Accesos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BadgeID")
                        .HasColumnType("int");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EncargadoID")
                        .HasColumnType("int");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.Property<string>("nombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenteID");

                    b.HasIndex("BadgeID");

                    b.HasIndex("EncargadoID");

                    b.HasIndex("PersonaID");

                    b.HasIndex("UnidadID");

                    b.ToTable("Asistente");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.BadgeEF", b =>
                {
                    b.Property<int>("BadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeID"));

                    b.Property<string>("Accesos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ocupado")
                        .HasColumnType("bit");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.HasKey("BadgeID");

                    b.HasIndex("UnidadID");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.EncargadoEF", b =>
                {
                    b.Property<int>("EncargadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EncargadoID"));

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.HasKey("EncargadoID");

                    b.HasIndex("PersonaID");

                    b.HasIndex("UnidadID");

                    b.ToTable("Encargado");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.EstacionTrabajoEF", b =>
                {
                    b.Property<int>("EstacionTrabajoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstacionTrabajoID"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("OficinaID")
                        .HasColumnType("int");

                    b.HasKey("EstacionTrabajoID");

                    b.HasIndex("OficinaID");

                    b.ToTable("EstacionTrabajo");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.HistorialAccionesEF", b =>
                {
                    b.Property<int>("HistoriaAccionesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoriaAccionesID"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoriaAccionesID");

                    b.ToTable("HistorialAcciones");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.HorarioEF", b =>
                {
                    b.Property<int>("HorarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorarioID"));

                    b.Property<int>("AsistenteID")
                        .HasColumnType("int");

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstacionTrabajoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("HorarioID");

                    b.HasIndex("AsistenteID");

                    b.HasIndex("EstacionTrabajoID");

                    b.ToTable("Horario");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.OficinaEF", b =>
                {
                    b.Property<int>("OficinaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OficinaID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OficinaID");

                    b.ToTable("Oficina");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.PersonaEF", b =>
                {
                    b.Property<int>("PersonaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonaID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonaID");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.ReporteBadgeEF", b =>
                {
                    b.Property<int>("ReporteBadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReporteBadgeID"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroBadge")
                        .HasColumnType("int");

                    b.HasKey("ReporteBadgeID");

                    b.ToTable("ReporteBadge");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.RolEF", b =>
                {
                    b.Property<int>("RolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolID");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.UnidadEF", b =>
                {
                    b.Property<int>("UnidadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnidadID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnidadID");

                    b.ToTable("Unidad");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.UsuarioEF", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.Property<int?>("RolID")
                        .HasColumnType("int");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.HasKey("UsuarioID");

                    b.HasIndex("PersonaID");

                    b.HasIndex("RolID");

                    b.HasIndex("UnidadID");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("GestionAsistente.BlazorUI.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UnidadID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UnidadID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.AdministradorEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.PersonaEF", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.RolEF", "Rol")
                        .WithMany()
                        .HasForeignKey("RolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.UnidadEF", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Rol");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.AsistenteEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.BadgeEF", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.EncargadoEF", "Encargado")
                        .WithMany()
                        .HasForeignKey("EncargadoID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.PersonaEF", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.UnidadEF", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Badge");

                    b.Navigation("Encargado");

                    b.Navigation("Persona");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.BadgeEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.UnidadEF", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.EncargadoEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.PersonaEF", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.UnidadEF", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Persona");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.EstacionTrabajoEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.OficinaEF", "Oficina")
                        .WithMany()
                        .HasForeignKey("OficinaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oficina");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.HorarioEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.AsistenteEF", "Asistente")
                        .WithMany()
                        .HasForeignKey("AsistenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.EstacionTrabajoEF", "EstacionTrabajo")
                        .WithMany()
                        .HasForeignKey("EstacionTrabajoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asistente");

                    b.Navigation("EstacionTrabajo");
                });

            modelBuilder.Entity("GestionAsistente.AccesoDatos.Modelos.UsuarioEF", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.PersonaEF", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.RolEF", "Rol")
                        .WithMany()
                        .HasForeignKey("RolID");

                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.UnidadEF", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID");

                    b.Navigation("Persona");

                    b.Navigation("Rol");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("GestionAsistente.BlazorUI.Data.ApplicationUser", b =>
                {
                    b.HasOne("GestionAsistente.AccesoDatos.Modelos.UnidadEF", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GestionAsistente.BlazorUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GestionAsistente.BlazorUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsistente.BlazorUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GestionAsistente.BlazorUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
